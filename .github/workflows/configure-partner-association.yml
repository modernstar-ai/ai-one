name: Configure Partner Association

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select the environment'
        type: choice
        default: 'dev'
        options:
          - 'dev'
          - 'tst'
          - 'uat'
          - 'prod'
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  configure-partner-association:
    name: Configure Partner Association
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Verify Permissions
        shell: pwsh
        run: |
          $requiredRole = "Managed Service Identity Operator"
          $roles = az role assignment list --assignee ${{ vars.AZURE_CLIENT_ID }} --output json | ConvertFrom-Json
          $hasRequiredRole = $roles | Where-Object { $_.roleDefinitionName -eq $requiredRole }

          if (-not $hasRequiredRole) {
            Write-Host "::error::Missing required role: $requiredRole"
            Write-Host "::error::Current assigned roles:"
            az role assignment list --assignee ${{ vars.AZURE_CLIENT_ID }} --output table
            Write-Host "::error::To fix this, run the following command:"
            Write-Host "::error::az role assignment create --assignee ${{ vars.AZURE_CLIENT_ID }} --role '$requiredRole' --scope /subscriptions/${{ vars.AZURE_SUBSCRIPTION_ID }}"
            exit 1
          }
          Write-Host "âœ… Required permissions verified"

      - name: Set Partner Association
        shell: pwsh
        run: |
          try {
            ./infra/scripts/set-partner-association.ps1 `
              -SubscriptionId "${{ vars.AZURE_SUBSCRIPTION_ID }}"
          }
          catch {
            $errorMessage = $_.Exception.Message
            if ($errorMessage -like "*ManagementPartnerNotFound*") {
              Write-Host "::error::Partner Association Failed: Service Principal lacks required permissions"
              Write-Host "::error::Required Role: Managed Service Identity Operator"
              Write-Host "::error::Required API Permission: Microsoft Graph > Application.ReadWrite.All"
              Write-Host "::error::To fix this:"
              Write-Host "::error::1. Add 'Managed Service Identity Operator' role to service principal"
              Write-Host "::error::2. Grant admin consent for Microsoft Graph permissions"
              exit 1
            }
            throw $_
          }

      - name: Print Configuration Summary
        run: |
          echo "âœ… Partner Association Configuration: Completed"
          echo ""
          echo "ðŸ“‹ Environment: ${{ inputs.environment }}"
          echo "ðŸ“‹ Subscription: ${{ vars.AZURE_SUBSCRIPTION_ID }}"
