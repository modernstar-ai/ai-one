{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.31.92.45157",
      "templateHash": "17179307341077676022"
    }
  },
  "parameters": {
    "projectName": {
      "type": "string",
      "defaultValue": "agilechat"
    },
    "environmentName": {
      "type": "string",
      "defaultValue": "dev"
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "tags": {
      "type": "object",
      "defaultValue": {}
    },
    "aspCoreEnvironment": {
      "type": "string",
      "defaultValue": "Development",
      "allowedValues": [
        "Development",
        "Production"
      ],
      "metadata": {
        "description": "Deployment Environment"
      }
    },
    "azureClientID": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "AZURE_CLIENT_ID"
      }
    },
    "azureClientSecret": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "AZURE_CLIENT_SECRET"
      }
    },
    "azureTenantId": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "AZURE_TENANT_ID"
      }
    },
    "openai_api_version": {
      "type": "string"
    },
    "openAiLocation": {
      "type": "string"
    },
    "openAiSkuName": {
      "type": "string"
    },
    "chatGptDeploymentCapacity": {
      "type": "int"
    },
    "chatGptDeploymentName": {
      "type": "string"
    },
    "chatGptModelName": {
      "type": "string"
    },
    "chatGptModelVersion": {
      "type": "string"
    },
    "embeddingDeploymentName": {
      "type": "string"
    },
    "embeddingDeploymentCapacity": {
      "type": "int"
    },
    "embeddingModelName": {
      "type": "string"
    },
    "OpenaiApiEmbeddingsModelName": {
      "type": "string",
      "defaultValue": "text-embedding-ada-002"
    },
    "AdminEmailAddress": {
      "type": "string",
      "defaultValue": "adam-stephensen@agile-analytics.com.au"
    },
    "AzureCosmosdbDbName": {
      "type": "string",
      "defaultValue": "chat"
    },
    "AzureCosmosdbDatabaseName": {
      "type": "string",
      "defaultValue": "chat"
    },
    "AzureCosmosdbContainerName": {
      "type": "string",
      "defaultValue": "history"
    },
    "AzureCosmosdbConfigContainerName": {
      "type": "string",
      "defaultValue": "config"
    },
    "AzureCosmosdbToolsContainerName": {
      "type": "string",
      "defaultValue": "tools"
    },
    "AzureCosmosdbFilesContainerName": {
      "type": "string",
      "defaultValue": "fileUploads"
    },
    "AzureSearchIndexNameRag": {
      "type": "string",
      "defaultValue": "rag_index"
    },
    "MaxUploadDocumentSize": {
      "type": "string",
      "defaultValue": "20000000"
    },
    "AzureStorageFoldersContainerName": {
      "type": "string",
      "defaultValue": "folders"
    },
    "dalleLocation": {
      "type": "string"
    },
    "dalleDeploymentCapacity": {
      "type": "int"
    },
    "dalleDeploymentName": {
      "type": "string"
    },
    "dalleModelName": {
      "type": "string"
    },
    "dalleApiVersion": {
      "type": "string"
    },
    "speechServiceSkuName": {
      "type": "string",
      "defaultValue": "S0"
    },
    "formRecognizerSkuName": {
      "type": "string",
      "defaultValue": "S0"
    },
    "searchServiceSkuName": {
      "type": "string",
      "defaultValue": "standard"
    },
    "searchServiceIndexName": {
      "type": "string",
      "defaultValue": "azure-chat"
    },
    "storageServiceSku": {
      "type": "object"
    },
    "storageServiceImageContainerName": {
      "type": "string"
    },
    "azureCosmosDbChatThreadsName": {
      "type": "string",
      "defaultValue": "history",
      "metadata": {
        "description": "Cosmos DB Chat threads container name"
      }
    },
    "storageServiceFoldersContainerName": {
      "type": "string",
      "defaultValue": "index-content",
      "metadata": {
        "description": "The container name where files will be stored for folder search"
      }
    },
    "azureADAppIdOrUri": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests"
      }
    },
    "roleAssignmentName": {
      "type": "string",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "The name of the Role Assignment - from Guid."
      }
    }
  },
  "variables": {
    "resourcePrefix": "[toLower(format('{0}-{1}', parameters('projectName'), parameters('environmentName')))]",
    "appservice_name": "[toLower(format('{0}-app', variables('resourcePrefix')))]",
    "webapp_name": "[toLower(format('{0}-webapp', variables('resourcePrefix')))]",
    "apiapp_name": "[toLower(format('{0}-apiapp', variables('resourcePrefix')))]",
    "applicationInsightsName": "[toLower(format('{0}-apiapp', variables('resourcePrefix')))]",
    "openai_name": "[toLower(format('{0}-aillm', variables('resourcePrefix')))]",
    "openai_dalle_name": "[toLower(format('{0}-aidalle', variables('resourcePrefix')))]",
    "form_recognizer_name": "[toLower(format('{0}-form', variables('resourcePrefix')))]",
    "speech_service_name": "[toLower(format('{0}-speech', variables('resourcePrefix')))]",
    "cosmos_name": "[toLower(format('{0}-cosmos', variables('resourcePrefix')))]",
    "search_name": "[toLower(format('{0}-search', variables('resourcePrefix')))]",
    "clean_name": "[replace(replace(format('{0}', variables('resourcePrefix')), '-', ''), '_', '')]",
    "storage_prefix": "[take(variables('clean_name'), 13)]",
    "storage_name": "[toLower(format('{0}sto', variables('storage_prefix')))]",
    "keyVaultName": "[toLower(format('{0}-kv', variables('resourcePrefix')))]",
    "la_workspace_name": "[toLower(format('{0}-la', variables('resourcePrefix')))]",
    "diagnostic_setting_name": "AppServiceConsoleLogs",
    "keyVaultSecretsOfficerRole": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
    "validStorageServiceImageContainerName": "[toLower(replace(parameters('storageServiceImageContainerName'), '-', ''))]",
    "databaseName": "chat",
    "historyContainerName": "history",
    "configContainerName": "config",
    "AzureStorageAccountConnection": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey=@Microsoft.KeyVault(VaultName={1};SecretName={2})', variables('storage_name'), variables('keyVaultName'), 'AZURE-STORAGE-ACCOUNT-KEY')]"
  },
  "resources": [
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('webapp_name'), 'logs')]",
      "properties": {
        "applicationLogs": {
          "fileSystem": {
            "level": "Verbose"
          }
        },
        "detailedErrorMessages": {
          "enabled": true
        },
        "failedRequestsTracing": {
          "enabled": true
        },
        "httpLogs": {
          "fileSystem": {
            "enabled": true,
            "retentionInDays": 1,
            "retentionInMb": 35
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('webapp_name'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('{0}/{1}', variables('keyVaultName'), 'AZURE-OPENAI-API-KEY')]",
      "properties": {
        "contentType": "text/plain",
        "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('openai_name')), '2023-05-01').key1]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.CognitiveServices/accounts', variables('openai_name'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('{0}/{1}', variables('keyVaultName'), 'AZURE-COSMOSDB-KEY')]",
      "properties": {
        "contentType": "text/plain",
        "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos_name')), '2023-04-15').secondaryMasterKey]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos_name'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('{0}/{1}', variables('keyVaultName'), 'AZURE-SEARCH-API-KEY')]",
      "properties": {
        "contentType": "text/plain",
        "value": "[listAdminKeys(resourceId('Microsoft.Search/searchServices', variables('search_name')), '2022-09-01').secondaryKey]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Search/searchServices', variables('search_name'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-06-01-preview",
      "name": "[format('{0}/{1}', variables('keyVaultName'), 'AZURE-STORAGE-ACCOUNT-KEY')]",
      "properties": {
        "contentType": "text/plain",
        "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storage_name')), '2023-05-01').keys[0].value]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storage_name'))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-02-01",
      "name": "[variables('appservice_name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "reserved": true
      },
      "sku": {
        "name": "P0v3",
        "tier": "Premium0V3",
        "size": "P0v3",
        "family": "Pv3",
        "capacity": 1
      },
      "kind": "linux"
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2020-06-01",
      "name": "[variables('webapp_name')]",
      "location": "[parameters('location')]",
      "tags": "[union(parameters('tags'), createObject('azd-service-name', 'agilechat-web'))]",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appservice_name'))]",
        "httpsOnly": true,
        "siteConfig": {
          "linuxFxVersion": "node|18-lts",
          "alwaysOn": true,
          "appCommandLine": "npx serve -s dist",
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2",
          "appSettings": [
            {
              "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
              "value": "false"
            },
            {
              "name": "ALLOWED_ORIGINS",
              "value": "[format('https://{0}.azurewebsites.net', variables('apiapp_name'))]"
            }
          ]
        }
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appservice_name'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2020-06-01",
      "name": "[variables('apiapp_name')]",
      "location": "[parameters('location')]",
      "tags": "[union(parameters('tags'), createObject('azd-service-name', 'agilechat-api'))]",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appservice_name'))]",
        "httpsOnly": true,
        "siteConfig": {
          "linuxFxVersion": "DOTNETCORE|8.0",
          "alwaysOn": true,
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2",
          "cors": {
            "allowedOrigins": [
              "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', variables('webapp_name')), '2020-06-01').defaultHostName)]"
            ],
            "supportCredentials": true
          },
          "defaultDocuments": [
            "string"
          ],
          "appSettings": [
            {
              "name": "AZURE_STORAGE_FOLDERS_CONTAINER_NAME",
              "value": "[parameters('AzureStorageFoldersContainerName')]"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_CONNECTION",
              "value": "[variables('AzureStorageAccountConnection')]"
            },
            {
              "name": "MAX_UPLOAD_DOCUMENT_SIZE",
              "value": "[parameters('MaxUploadDocumentSize')]"
            },
            {
              "name": "AZURE_SEARCH_ENDPOINT",
              "value": "[format('https://{0}.search.windows.net', variables('search_name'))]"
            },
            {
              "name": "AZURE_SEARCH_INDEX_NAME_RAG",
              "value": "[parameters('AzureSearchIndexNameRag')]"
            },
            {
              "name": "AZURE_OPENAI_API_EMBEDDINGS_MODEL_NAME",
              "value": "[parameters('OpenaiApiEmbeddingsModelName')]"
            },
            {
              "name": "ADMIN_EMAIL_ADDRESS",
              "value": "[parameters('AdminEmailAddress')]"
            },
            {
              "name": "AZURE_COSMOSDB_DB_NAME",
              "value": "[parameters('AzureCosmosdbDbName')]"
            },
            {
              "name": "AZURE_COSMOSDB_DATABASE_NAME",
              "value": "[parameters('AzureCosmosdbDatabaseName')]"
            },
            {
              "name": "AZURE_COSMOSDB_CONTAINER_NAME",
              "value": "[parameters('AzureCosmosdbContainerName')]"
            },
            {
              "name": "AZURE_COSMOSDB_CONFIG_CONTAINER_NAME",
              "value": "[parameters('AzureCosmosdbConfigContainerName')]"
            },
            {
              "name": "AZURE_COSMOSDB_TOOLS_CONTAINER_NAME",
              "value": "[parameters('AzureCosmosdbToolsContainerName')]"
            },
            {
              "name": "AZURE_COSMOSDB_FILES_CONTAINER_NAME",
              "value": "[parameters('AzureCosmosdbFilesContainerName')]"
            },
            {
              "name": "AZURE_AI_SERVICES_KEY",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), 'AZURE-OPENAI-API-KEY')]"
            },
            {
              "name": "ALLOWED_ORIGINS",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', variables('webapp_name')), '2020-06-01').defaultHostName)]"
            },
            {
              "name": "AZURE_COSMOSDB_CHAT_THREADS_CONTAINER_NAME",
              "value": "[parameters('azureCosmosDbChatThreadsName')]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02').InstrumentationKey]"
            },
            {
              "name": "AZURE_CLIENT_ID",
              "value": "[parameters('azureClientID')]"
            },
            {
              "name": "AZURE_CLIENT_SECRET",
              "value": "[parameters('azureClientSecret')]"
            },
            {
              "name": "AZURE_TENANT_ID",
              "value": "[parameters('azureTenantId')]"
            },
            {
              "name": "AZURE_KEY_VAULT_NAME",
              "value": "[variables('keyVaultName')]"
            },
            {
              "name": "ASPNETCORE_ENVIRONMENT",
              "value": "[parameters('aspCoreEnvironment')]"
            },
            {
              "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
              "value": "false"
            },
            {
              "name": "AZURE_OPENAI_API_KEY",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), 'AZURE-OPENAI-API-KEY')]"
            },
            {
              "name": "AZURE_OPENAI_API_INSTANCE_NAME",
              "value": "[variables('openai_name')]"
            },
            {
              "name": "AZURE_OPENAI_API_DEPLOYMENT_NAME",
              "value": "[parameters('chatGptDeploymentName')]"
            },
            {
              "name": "AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME",
              "value": "[parameters('embeddingDeploymentName')]"
            },
            {
              "name": "AZURE_OPENAI_API_VERSION",
              "value": "[parameters('openai_api_version')]"
            },
            {
              "name": "AZURE_OPENAI_ENDPOINT",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('openai_name')), '2023-05-01').endpoint]"
            },
            {
              "name": "AZURE_COSMOSDB_URI",
              "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos_name')), '2023-04-15').documentEndpoint]"
            },
            {
              "name": "AZURE_COSMOSDB_KEY",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), 'AZURE-COSMOSDB-KEY')]"
            },
            {
              "name": "AZURE_SEARCH_API_KEY",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), 'AZURE-SEARCH-API-KEY')]"
            },
            {
              "name": "AZURE_SEARCH_NAME",
              "value": "[variables('search_name')]"
            },
            {
              "name": "AZURE_SEARCH_INDEX_NAME",
              "value": "[parameters('searchServiceIndexName')]"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_NAME",
              "value": "[variables('storage_name')]"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_KEY",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), 'AZURE-STORAGE-ACCOUNT-KEY')]"
            }
          ]
        }
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
        "[resourceId('Microsoft.Web/serverfarms', variables('appservice_name'))]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'AZURE-COSMOSDB-KEY')]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'AZURE-OPENAI-API-KEY')]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'AZURE-SEARCH-API-KEY')]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'AZURE-STORAGE-ACCOUNT-KEY')]",
        "[resourceId('Microsoft.CognitiveServices/accounts', variables('openai_name'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos_name'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Web/sites', variables('webapp_name'))]"
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-12-01-preview",
      "name": "[variables('la_workspace_name')]",
      "tags": "[parameters('tags')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('la_workspace_name'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('la_workspace_name'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.Web/sites/{0}', variables('webapp_name'))]",
      "name": "[variables('diagnostic_setting_name')]",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('la_workspace_name'))]",
        "logs": [
          {
            "category": "AppServiceConsoleLogs",
            "enabled": true
          }
        ],
        "metrics": []
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('la_workspace_name'))]",
        "[resourceId('Microsoft.Web/sites', variables('webapp_name'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('keyVaultName'))]",
      "name": "[parameters('roleAssignmentName')]",
      "properties": {
        "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('apiapp_name')), '2020-06-01', 'full').identity.principalId]",
        "principalType": "ServicePrincipal",
        "roleDefinitionId": "[variables('keyVaultSecretsOfficerRole')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('apiapp_name'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2021-06-01-preview",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "enableRbacAuthorization": true,
        "enabledForDeployment": false,
        "enabledForDiskEncryption": true,
        "enabledForTemplateDeployment": false
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2023-04-15",
      "name": "[variables('cosmos_name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "GlobalDocumentDB",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "locations": [
          {
            "locationName": "[parameters('location')]",
            "failoverPriority": 0
          }
        ],
        "disableKeyBasedMetadataWriteAccess": true
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2022-05-15",
      "name": "[format('{0}/{1}', variables('cosmos_name'), variables('databaseName'))]",
      "properties": {
        "resource": {
          "id": "[variables('databaseName')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos_name'))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2022-05-15",
      "name": "[format('{0}/{1}/{2}', variables('cosmos_name'), variables('databaseName'), variables('historyContainerName'))]",
      "properties": {
        "resource": {
          "id": "[variables('historyContainerName')]",
          "partitionKey": {
            "paths": [
              "/userId"
            ],
            "kind": "Hash"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmos_name'), variables('databaseName'))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2022-05-15",
      "name": "[format('{0}/{1}/{2}', variables('cosmos_name'), variables('databaseName'), variables('configContainerName'))]",
      "properties": {
        "resource": {
          "id": "[variables('configContainerName')]",
          "partitionKey": {
            "paths": [
              "/userId"
            ],
            "kind": "Hash"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmos_name'), variables('databaseName'))]"
      ]
    },
    {
      "type": "Microsoft.Search/searchServices",
      "apiVersion": "2022-09-01",
      "name": "[variables('search_name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "partitionCount": 1,
        "publicNetworkAccess": "enabled",
        "replicaCount": 1
      },
      "sku": {
        "name": "[parameters('searchServiceSkuName')]"
      }
    },
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2023-05-01",
      "name": "[variables('openai_name')]",
      "location": "[parameters('openAiLocation')]",
      "tags": "[parameters('tags')]",
      "kind": "OpenAI",
      "properties": {
        "customSubDomainName": "[variables('openai_name')]",
        "publicNetworkAccess": "Enabled"
      },
      "sku": {
        "name": "[parameters('openAiSkuName')]"
      }
    },
    {
      "type": "Microsoft.CognitiveServices/accounts/deployments",
      "apiVersion": "2023-05-01",
      "name": "[format('{0}/{1}', variables('openai_name'), parameters('chatGptDeploymentName'))]",
      "sku": {
        "name": "GlobalStandard",
        "capacity": "[parameters('chatGptDeploymentCapacity')]"
      },
      "properties": {
        "model": {
          "format": "OpenAI",
          "name": "[parameters('chatGptModelName')]",
          "version": "[parameters('chatGptModelVersion')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.CognitiveServices/accounts', variables('openai_name'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-05-01",
      "name": "[variables('storage_name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "StorageV2",
      "sku": "[parameters('storageServiceSku')]"
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2023-01-01",
      "name": "[format('{0}/{1}', variables('storage_name'), 'default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storage_name'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2023-05-01",
      "name": "[format('{0}/{1}/{2}', variables('storage_name'), 'default', variables('validStorageServiceImageContainerName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_name'), 'default')]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2023-05-01",
      "name": "[format('{0}/{1}/{2}', variables('storage_name'), 'default', parameters('storageServiceFoldersContainerName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storage_name'), 'default')]"
      ]
    },
    {
      "type": "Microsoft.EventGrid/systemTopics",
      "apiVersion": "2024-06-01-preview",
      "name": "[format('{0}-blobs-updated', variables('storage_name'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "source": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Storage/storageAccounts/{2}', subscription().subscriptionId, resourceGroup().name, variables('storage_name'))]",
        "topicType": "Microsoft.Storage.StorageAccounts"
      },
      "metadata": {
        "description": "Event Grid System Topic"
      }
    },
    {
      "type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
      "apiVersion": "2024-06-01-preview",
      "name": "[format('{0}/{1}', format('{0}-blobs-updated', variables('storage_name')), format('{0}-blobs-updated', variables('storage_name')))]",
      "properties": {
        "destination": {
          "endpointType": "WebHook",
          "properties": {
            "azureActiveDirectoryApplicationIdOrUri": "[parameters('azureADAppIdOrUri')]",
            "azureActiveDirectoryTenantId": "[parameters('azureTenantId')]",
            "endpointUrl": "[format('https://{0}/api/file/webhook', reference(resourceId('Microsoft.Web/sites', variables('apiapp_name')), '2020-06-01').defaultHostName)]"
          }
        },
        "filter": {
          "includedEventTypes": [
            "Microsoft.Storage.BlobCreated",
            "Microsoft.Storage.BlobDeleted"
          ],
          "isSubjectCaseSensitive": false,
          "enableAdvancedFilteringOnArrays": true,
          "subjectBeginsWith": "[format('/blobServices/default/containers/{0}/', parameters('storageServiceFoldersContainerName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('apiapp_name'))]",
        "[resourceId('Microsoft.EventGrid/systemTopics', format('{0}-blobs-updated', variables('storage_name')))]"
      ],
      "metadata": {
        "description": "Event Grid Subscription"
      }
    }
  ],
  "outputs": {
    "url": {
      "type": "string",
      "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', variables('webapp_name')), '2020-06-01').defaultHostName)]"
    },
    "api_url": {
      "type": "string",
      "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', variables('apiapp_name')), '2020-06-01').defaultHostName)]"
    }
  }
}