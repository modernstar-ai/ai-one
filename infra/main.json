{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.31.92.45157",
      "templateHash": "11471253514499519367"
    }
  },
  "parameters": {
    "projectName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 9,
      "metadata": {
        "description": "The name of the solution."
      }
    },
    "environmentName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 4,
      "metadata": {
        "description": "The type of environment. e.g. local, dev, uat, prod."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "minLength": 1,
      "metadata": {
        "description": "Primary location for all resources"
      }
    },
    "openAILocation": {
      "type": "string",
      "allowedValues": [
        "australiaeast",
        "brazilsouth",
        "canadaeast",
        "eastus",
        "eastus2",
        "francecentral",
        "germanywestcentral",
        "japaneast",
        "koreacentral",
        "northcentralus",
        "norwayeast",
        "polandcentral",
        "spaincentral",
        "southafricanorth",
        "southcentralus",
        "southindia",
        "swedencentral",
        "switzerlandnorth",
        "uksouth",
        "westeurope",
        "westus",
        "westus3"
      ],
      "metadata": {
        "azd": {
          "type": "location"
        },
        "description": "Location for the OpenAI resource group"
      }
    },
    "openAISku": {
      "type": "string",
      "defaultValue": "S0"
    },
    "openAIApiVersion": {
      "type": "string",
      "defaultValue": "2024-08-01-preview"
    },
    "chatGptDeploymentCapacity": {
      "type": "int",
      "defaultValue": 8
    },
    "chatGptDeploymentName": {
      "type": "string",
      "defaultValue": "gpt-4o"
    },
    "chatGptModelName": {
      "type": "string",
      "defaultValue": "gpt-4o"
    },
    "chatGptModelVersion": {
      "type": "string",
      "defaultValue": "2024-05-13"
    },
    "embeddingDeploymentName": {
      "type": "string",
      "defaultValue": "embedding"
    },
    "embeddingDeploymentCapacity": {
      "type": "int",
      "defaultValue": 120
    },
    "embeddingModelName": {
      "type": "string",
      "defaultValue": "text-embedding-ada-002"
    },
    "searchServiceSkuName": {
      "type": "string",
      "defaultValue": "standard"
    },
    "storageServiceSku": {
      "type": "object",
      "defaultValue": {
        "name": "Standard_LRS"
      }
    },
    "storageServiceImageContainerName": {
      "type": "string",
      "defaultValue": "images"
    },
    "aspCoreEnvironment": {
      "type": "string",
      "defaultValue": "Development",
      "allowedValues": [
        "Development",
        "Test",
        "UAT",
        "Production"
      ],
      "metadata": {
        "description": "Deployment Environment"
      }
    },
    "azureClientID": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "AZURE_CLIENT_ID"
      }
    },
    "azureClientSecret": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "AZURE_CLIENT_SECRET"
      }
    },
    "azureTenantId": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "AZURE_TENANT_ID"
      }
    },
    "azureADAppIdOrUri": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests"
      }
    },
    "deployEventGrid": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Conditionally deploy event Grid"
      }
    },
    "kvSetFunctionAppPermissions": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Conditionally deploy key vault Api app permissions"
      }
    },
    "UtsRoleApiEndpoint": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "UTS Role Endpoint"
      }
    },
    "UtsXApiKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "UTS Subject Query API Key"
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "uts_costcentre": "5000023.00000000",
      "uts_primarycontact": "carl.young@uts.edu.au",
      "uts_env": "test",
      "uts_project": "2023-2035 Artificial Intelligence",
      "uts_research": "Yes",
      "uts_iac": "Yes",
      "uts_repo": "https://github.com/uts-itd/agile-chat",
      "uts_data_classification": "UTS Internal",
      "uts_business_owner": "susan.gibson@uts.edu.au",
      "azd-env-name": "uts-dev"
    },
    "tagsFilePath": "./uts.tags.json",
    "tags": "[variables('$fxv#0')]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "all-resources",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "projectName": {
            "value": "[parameters('projectName')]"
          },
          "environmentName": {
            "value": "[parameters('environmentName')]"
          },
          "tags": {
            "value": "[union(variables('tags'), createObject('azd-env-name', parameters('environmentName')))]"
          },
          "openai_api_version": {
            "value": "[parameters('openAIApiVersion')]"
          },
          "openAiLocation": {
            "value": "[parameters('openAILocation')]"
          },
          "openAiSkuName": {
            "value": "[parameters('openAISku')]"
          },
          "chatGptDeploymentCapacity": {
            "value": "[parameters('chatGptDeploymentCapacity')]"
          },
          "chatGptDeploymentName": {
            "value": "[parameters('chatGptDeploymentName')]"
          },
          "chatGptModelName": {
            "value": "[parameters('chatGptModelName')]"
          },
          "chatGptModelVersion": {
            "value": "[parameters('chatGptModelVersion')]"
          },
          "embeddingDeploymentName": {
            "value": "[parameters('embeddingDeploymentName')]"
          },
          "embeddingDeploymentCapacity": {
            "value": "[parameters('embeddingDeploymentCapacity')]"
          },
          "embeddingModelName": {
            "value": "[parameters('embeddingModelName')]"
          },
          "searchServiceSkuName": {
            "value": "[parameters('searchServiceSkuName')]"
          },
          "storageServiceSku": {
            "value": "[parameters('storageServiceSku')]"
          },
          "storageServiceImageContainerName": {
            "value": "[parameters('storageServiceImageContainerName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "aspCoreEnvironment": {
            "value": "[parameters('aspCoreEnvironment')]"
          },
          "azureClientID": {
            "value": "[parameters('azureClientID')]"
          },
          "azureClientSecret": {
            "value": "[parameters('azureClientSecret')]"
          },
          "azureTenantId": {
            "value": "[parameters('azureTenantId')]"
          },
          "azureADAppIdOrUri": {
            "value": "[parameters('azureADAppIdOrUri')]"
          },
          "UtsRoleApiEndpoint": {
            "value": "[parameters('UtsRoleApiEndpoint')]"
          },
          "UtsXApiKey": {
            "value": "[parameters('UtsXApiKey')]"
          },
          "deployEventGrid": {
            "value": "[parameters('deployEventGrid')]"
          },
          "kvSetFunctionAppPermissions": {
            "value": "[parameters('kvSetFunctionAppPermissions')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.92.45157",
              "templateHash": "14530161189800946302"
            }
          },
          "parameters": {
            "projectName": {
              "type": "string",
              "defaultValue": "agilechat"
            },
            "environmentName": {
              "type": "string",
              "defaultValue": "dev"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "aspCoreEnvironment": {
              "type": "string",
              "defaultValue": "Development",
              "allowedValues": [
                "Development",
                "Test",
                "UAT",
                "Production"
              ],
              "metadata": {
                "description": "Deployment Environment"
              }
            },
            "azureClientID": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "AZURE_CLIENT_ID"
              }
            },
            "azureClientSecret": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "AZURE_CLIENT_SECRET"
              }
            },
            "azureTenantId": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "AZURE_TENANT_ID"
              }
            },
            "auditIncludePII": {
              "type": "string",
              "defaultValue": "true",
              "allowedValues": [
                "true",
                "false"
              ],
              "metadata": {
                "description": "Enable PII Auditing"
              }
            },
            "openai_api_version": {
              "type": "string"
            },
            "openAiLocation": {
              "type": "string"
            },
            "openAiSkuName": {
              "type": "string"
            },
            "chatGptDeploymentCapacity": {
              "type": "int"
            },
            "chatGptDeploymentName": {
              "type": "string"
            },
            "chatGptModelName": {
              "type": "string"
            },
            "chatGptModelVersion": {
              "type": "string"
            },
            "embeddingDeploymentName": {
              "type": "string"
            },
            "embeddingDeploymentCapacity": {
              "type": "int"
            },
            "embeddingModelName": {
              "type": "string"
            },
            "AdminEmailAddresses": {
              "type": "array",
              "defaultValue": [
                "adam-stephensen@agile-analytics.com.au"
              ],
              "metadata": {
                "description": "Admin email addresses array"
              }
            },
            "searchServiceSkuName": {
              "type": "string",
              "defaultValue": "standard"
            },
            "storageServiceSku": {
              "type": "object"
            },
            "storageServiceImageContainerName": {
              "type": "string"
            },
            "storage_name": {
              "type": "string",
              "defaultValue": "[toLower(format('stg{0}', uniqueString(resourceGroup().id)))]",
              "metadata": {
                "description": "The unique name of the Storage Account."
              }
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": "[toLower(format('kv-{0}', uniqueString(resourceGroup().id)))]",
              "metadata": {
                "description": "The unique name of the Key Vault."
              }
            },
            "kvSetFunctionAppPermissions": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Conditionally deploy key vault Api app permissions"
              }
            },
            "storageServiceFoldersContainerName": {
              "type": "string",
              "defaultValue": "index-content",
              "metadata": {
                "description": "The container name where files will be stored for folder search"
              }
            },
            "azureADAppIdOrUri": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests"
              }
            },
            "deployEventGrid": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Conditionally deploy event Grid"
              }
            },
            "UtsRoleApiEndpoint": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "UTS Role Endpoint"
              }
            },
            "UtsXApiKey": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "UTS Subject Query API Key"
              }
            },
            "roleAssignmentName": {
              "type": "string",
              "defaultValue": "[newGuid()]",
              "metadata": {
                "description": "The name of the Role Assignment - from Guid."
              }
            }
          },
          "variables": {
            "resourcePrefix": "[toLower(format('{0}-{1}', parameters('projectName'), parameters('environmentName')))]",
            "appservice_name": "[toLower(format('{0}-app', variables('resourcePrefix')))]",
            "webapp_name": "[toLower(format('{0}-webapp', variables('resourcePrefix')))]",
            "apiapp_name": "[toLower(format('{0}-apiapp', variables('resourcePrefix')))]",
            "applicationInsightsName": "[toLower(format('{0}-apiapp', variables('resourcePrefix')))]",
            "openai_name": "[toLower(format('{0}-aillm', variables('resourcePrefix')))]",
            "cosmos_name": "[toLower(format('{0}-cosmos', variables('resourcePrefix')))]",
            "search_name": "[toLower(format('{0}-search', variables('resourcePrefix')))]",
            "la_workspace_name": "[toLower(format('{0}-la', variables('resourcePrefix')))]",
            "diagnostic_setting_name": "AppServiceConsoleLogs",
            "keyVaultSecretsOfficerRole": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
            "validStorageServiceImageContainerName": "[toLower(replace(parameters('storageServiceImageContainerName'), '-', ''))]",
            "EventGridSystemTopicName": "[toLower(format('{0}-folders-listener', variables('resourcePrefix')))]",
            "EventGridSystemTopicSubName": "[toLower(format('{0}-folders-blobs-listener', variables('resourcePrefix')))]",
            "databaseName": "chat",
            "historyContainerName": "history",
            "configContainerName": "config",
            "aiServices_name": "[toLower(format('{0}{1}-ai-services', parameters('projectName'), parameters('environmentName')))]",
            "llmDeployments": [
              {
                "name": "[parameters('chatGptDeploymentName')]",
                "model": {
                  "format": "OpenAI",
                  "name": "[parameters('chatGptModelName')]",
                  "version": "[parameters('chatGptModelVersion')]"
                },
                "sku": {
                  "name": "GlobalStandard",
                  "capacity": "[parameters('chatGptDeploymentCapacity')]"
                }
              },
              {
                "name": "[parameters('embeddingDeploymentName')]",
                "model": {
                  "format": "OpenAI",
                  "name": "[parameters('embeddingModelName')]",
                  "version": "2"
                },
                "capacity": "[parameters('embeddingDeploymentCapacity')]"
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', variables('webapp_name'), 'logs')]",
              "properties": {
                "applicationLogs": {
                  "fileSystem": {
                    "level": "Verbose"
                  }
                },
                "detailedErrorMessages": {
                  "enabled": true
                },
                "failedRequestsTracing": {
                  "enabled": true
                },
                "httpLogs": {
                  "fileSystem": {
                    "enabled": true,
                    "retentionInDays": 1,
                    "retentionInMb": 35
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('webapp_name'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-06-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-OPENAI-API-KEY')]",
              "properties": {
                "contentType": "text/plain",
                "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('openai_name')), '2023-05-01').key1]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('openai_name'))]",
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-06-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-COSMOSDB-KEY')]",
              "properties": {
                "contentType": "text/plain",
                "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos_name')), '2023-04-15').secondaryMasterKey]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos_name'))]",
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-06-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-SEARCH-API-KEY')]",
              "properties": {
                "contentType": "text/plain",
                "value": "[listAdminKeys(resourceId('Microsoft.Search/searchServices', variables('search_name')), '2022-09-01').secondaryKey]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "[resourceId('Microsoft.Search/searchServices', variables('search_name'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-06-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-STORAGE-ACCOUNT-KEY')]",
              "properties": {
                "contentType": "text/plain",
                "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storage_name')), '2023-05-01').keys[0].value]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storage_name'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-06-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-STORAGE-ACCOUNT-CONNECTION')]",
              "properties": {
                "contentType": "text/plain",
                "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('storage_name'), listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storage_name')), '2023-01-01').keys[0].value, environment().suffixes.storage)]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storage_name'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-06-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-AI-SERVICES-KEY')]",
              "properties": {
                "contentType": "text/plain",
                "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('aiServices_name')), '2024-10-01').key1]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('aiServices_name'))]",
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-06-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-CLIENT-ID')]",
              "properties": {
                "contentType": "text/plain",
                "value": "[parameters('azureClientID')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-06-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-CLIENT-SECRET')]",
              "properties": {
                "contentType": "text/plain",
                "value": "[parameters('azureClientSecret')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-06-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'AZURE-TENANT-ID')]",
              "properties": {
                "contentType": "text/plain",
                "value": "[parameters('azureTenantId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-06-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'UTS-XAPI-KEY')]",
              "properties": {
                "contentType": "text/plain",
                "value": "[parameters('UtsXApiKey')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2021-02-01",
              "name": "[variables('appservice_name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "reserved": true
              },
              "sku": {
                "name": "P0v3",
                "tier": "Premium0V3",
                "size": "P0v3",
                "family": "Pv3",
                "capacity": 1
              },
              "kind": "linux"
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2020-06-01",
              "name": "[variables('webapp_name')]",
              "location": "[parameters('location')]",
              "tags": "[union(parameters('tags'), createObject('azd-service-name', 'agilechat-web'))]",
              "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appservice_name'))]",
                "httpsOnly": true,
                "clientAffinityEnabled": false,
                "siteConfig": {
                  "linuxFxVersion": "node|18-lts",
                  "alwaysOn": true,
                  "appCommandLine": "npx serve -s dist",
                  "ftpsState": "Disabled",
                  "minTlsVersion": "1.2",
                  "appSettings": [
                    {
                      "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
                      "value": "false"
                    },
                    {
                      "name": "ALLOWED_ORIGINS",
                      "value": "[format('https://{0}.azurewebsites.net', variables('apiapp_name'))]"
                    }
                  ]
                }
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('appservice_name'))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2020-06-01",
              "name": "[variables('apiapp_name')]",
              "location": "[parameters('location')]",
              "tags": "[union(parameters('tags'), createObject('azd-service-name', 'agilechat-api'))]",
              "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appservice_name'))]",
                "httpsOnly": true,
                "clientAffinityEnabled": false,
                "siteConfig": {
                  "linuxFxVersion": "DOTNETCORE|8.0",
                  "alwaysOn": true,
                  "ftpsState": "Disabled",
                  "minTlsVersion": "1.2",
                  "connectionStrings": [
                    {
                      "connectionString": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02').ConnectionString]",
                      "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                      "type": "Custom"
                    }
                  ],
                  "cors": {
                    "allowedOrigins": [
                      "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', variables('webapp_name')), '2020-06-01').defaultHostName)]"
                    ],
                    "supportCredentials": true
                  },
                  "defaultDocuments": [
                    "string"
                  ],
                  "appSettings": [
                    {
                      "name": "BlobStorage__Name",
                      "value": "[parameters('storage_name')]"
                    },
                    {
                      "name": "BlobStorage__Key",
                      "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', parameters('keyVaultName'), 'AZURE-STORAGE-ACCOUNT-CONNECTION')]"
                    },
                    {
                      "name": "Audit__IncludePII",
                      "value": "[parameters('auditIncludePII')]"
                    },
                    {
                      "name": "AzureAd__ClientId",
                      "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', parameters('keyVaultName'), 'AZURE-CLIENT-ID')]"
                    },
                    {
                      "name": "AzureAd__ClientSecret",
                      "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', parameters('keyVaultName'), 'AZURE-CLIENT-SECRET')]"
                    },
                    {
                      "name": "AzureAd__TenantId",
                      "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', parameters('keyVaultName'), 'AZURE-TENANT-ID')]"
                    },
                    {
                      "name": "AzureAiServicesKey",
                      "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', parameters('keyVaultName'), 'AZURE-AI-SERVICES-KEY')]"
                    },
                    {
                      "name": "AzureOpenAi__Endpoint",
                      "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('openai_name')), '2023-05-01').endpoint]"
                    },
                    {
                      "name": "AzureOpenAi__ApiKey",
                      "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', parameters('keyVaultName'), 'AZURE-OPENAI-API-KEY')]"
                    },
                    {
                      "name": "AzureOpenAi__ApiVersion",
                      "value": "[parameters('openai_api_version')]"
                    },
                    {
                      "name": "AzureOpenAi__InstanceName",
                      "value": "[variables('openai_name')]"
                    },
                    {
                      "name": "AzureOpenAi__DeploymentName",
                      "value": "[parameters('chatGptDeploymentName')]"
                    },
                    {
                      "name": "AzureOpenAi__EmbeddingsDeploymentName",
                      "value": "[parameters('embeddingDeploymentName')]"
                    },
                    {
                      "name": "AzureOpenAi__EmbeddingsModelName",
                      "value": "[parameters('embeddingModelName')]"
                    },
                    {
                      "name": "AzureSearch__Endpoint",
                      "value": "[format('https://{0}.search.windows.net', variables('search_name'))]"
                    },
                    {
                      "name": "AzureSearch__ApiKey",
                      "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', parameters('keyVaultName'), 'AZURE-SEARCH-API-KEY')]"
                    },
                    {
                      "name": "CosmosDb__Endpoint",
                      "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos_name')), '2023-04-15').documentEndpoint]"
                    },
                    {
                      "name": "CosmosDb__Key",
                      "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', parameters('keyVaultName'), 'AZURE-COSMOSDB-KEY')]"
                    },
                    {
                      "name": "AdminEmailAddresses",
                      "value": "[join(parameters('AdminEmailAddresses'), ',')]"
                    },
                    {
                      "name": "UtsRoleApiEndpoint",
                      "value": "[parameters('UtsRoleApiEndpoint')]"
                    },
                    {
                      "name": "UtsXApiKey",
                      "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', parameters('keyVaultName'), 'UTS-XAPI-KEY')]"
                    },
                    {
                      "name": "ALLOWED_ORIGINS",
                      "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', variables('webapp_name')), '2020-06-01').defaultHostName)]"
                    },
                    {
                      "name": "ASPNETCORE_ENVIRONMENT",
                      "value": "[parameters('aspCoreEnvironment')]"
                    },
                    {
                      "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
                      "value": "false"
                    }
                  ]
                }
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
                "[resourceId('Microsoft.Web/serverfarms', variables('appservice_name'))]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), 'AZURE-AI-SERVICES-KEY')]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), 'AZURE-CLIENT-ID')]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), 'AZURE-CLIENT-SECRET')]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), 'AZURE-COSMOSDB-KEY')]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), 'AZURE-OPENAI-API-KEY')]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), 'AZURE-SEARCH-API-KEY')]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), 'AZURE-STORAGE-ACCOUNT-CONNECTION')]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), 'AZURE-TENANT-ID')]",
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('openai_name'))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos_name'))]",
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), 'UTS-XAPI-KEY')]",
                "[resourceId('Microsoft.Web/sites', variables('webapp_name'))]"
              ]
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2021-12-01-preview",
              "name": "[variables('la_workspace_name')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[variables('applicationInsightsName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('la_workspace_name'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('la_workspace_name'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', variables('webapp_name'))]",
              "name": "[variables('diagnostic_setting_name')]",
              "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('la_workspace_name'))]",
                "logs": [
                  {
                    "category": "AppServiceConsoleLogs",
                    "enabled": true
                  }
                ],
                "metrics": []
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('la_workspace_name'))]",
                "[resourceId('Microsoft.Web/sites', variables('webapp_name'))]"
              ]
            },
            {
              "condition": "[parameters('kvSetFunctionAppPermissions')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[parameters('roleAssignmentName')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('apiapp_name')), '2020-06-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[variables('keyVaultSecretsOfficerRole')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('apiapp_name'))]",
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-06-01-preview",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "tenantId": "[subscription().tenantId]",
                "enableRbacAuthorization": true,
                "enabledForDeployment": false,
                "enabledForDiskEncryption": true,
                "enabledForTemplateDeployment": false
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2023-04-15",
              "name": "[variables('cosmos_name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "GlobalDocumentDB",
              "properties": {
                "databaseAccountOfferType": "Standard",
                "locations": [
                  {
                    "locationName": "[parameters('location')]",
                    "failoverPriority": 0
                  }
                ]
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}', variables('cosmos_name'), variables('databaseName'))]",
              "properties": {
                "resource": {
                  "id": "[variables('databaseName')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmos_name'))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}/{2}', variables('cosmos_name'), variables('databaseName'), variables('historyContainerName'))]",
              "properties": {
                "resource": {
                  "id": "[variables('historyContainerName')]",
                  "partitionKey": {
                    "paths": [
                      "/userId"
                    ],
                    "kind": "Hash"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmos_name'), variables('databaseName'))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}/{2}', variables('cosmos_name'), variables('databaseName'), variables('configContainerName'))]",
              "properties": {
                "resource": {
                  "id": "[variables('configContainerName')]",
                  "partitionKey": {
                    "paths": [
                      "/userId"
                    ],
                    "kind": "Hash"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmos_name'), variables('databaseName'))]"
              ]
            },
            {
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2022-09-01",
              "name": "[variables('search_name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "partitionCount": 1,
                "publicNetworkAccess": "enabled",
                "replicaCount": 1
              },
              "sku": {
                "name": "[parameters('searchServiceSkuName')]"
              },
              "identity": {
                "type": "SystemAssigned"
              }
            },
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2023-05-01",
              "name": "[variables('openai_name')]",
              "location": "[parameters('openAiLocation')]",
              "tags": "[parameters('tags')]",
              "kind": "OpenAI",
              "properties": {
                "customSubDomainName": "[variables('openai_name')]",
                "publicNetworkAccess": "Enabled"
              },
              "sku": {
                "name": "[parameters('openAiSkuName')]"
              }
            },
            {
              "copy": {
                "name": "llmdeployment",
                "count": "[length(variables('llmDeployments'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', variables('openai_name'), variables('llmDeployments')[copyIndex()].name)]",
              "properties": {
                "model": "[variables('llmDeployments')[copyIndex()].model]",
                "raiPolicyName": "[if(contains(variables('llmDeployments')[copyIndex()], 'raiPolicyName'), tryGet(variables('llmDeployments')[copyIndex()], 'raiPolicyName'), null())]"
              },
              "sku": "[if(contains(variables('llmDeployments')[copyIndex()], 'sku'), variables('llmDeployments')[copyIndex()].sku, createObject('name', 'Standard', 'capacity', variables('llmDeployments')[copyIndex()].capacity))]",
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('openai_name'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('storage_name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "StorageV2",
              "sku": "[parameters('storageServiceSku')]",
              "metadata": {
                "description": "Storage Account"
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', parameters('storage_name'), 'default')]",
              "properties": {
                "deleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storage_name'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}/{2}', parameters('storage_name'), 'default', variables('validStorageServiceImageContainerName'))]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storage_name'), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}/{2}', parameters('storage_name'), 'default', parameters('storageServiceFoldersContainerName'))]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storage_name'), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storage_name'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storage_name')), resourceId('Microsoft.Search/searchServices', variables('search_name')), 'blob-reader')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                "principalId": "[reference(resourceId('Microsoft.Search/searchServices', variables('search_name')), '2022-09-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('search_name'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storage_name'))]"
              ],
              "metadata": {
                "description": "Role Assignment for search to access blob storage"
              }
            },
            {
              "condition": "[parameters('deployEventGrid')]",
              "type": "Microsoft.EventGrid/systemTopics",
              "apiVersion": "2024-06-01-preview",
              "name": "[variables('EventGridSystemTopicName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "source": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storage_name'))]",
                "topicType": "Microsoft.Storage.StorageAccounts"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storage_name'))]"
              ],
              "metadata": {
                "description": "Event Grid System Topic"
              }
            },
            {
              "condition": "[parameters('deployEventGrid')]",
              "type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
              "apiVersion": "2024-06-01-preview",
              "name": "[format('{0}/{1}', variables('EventGridSystemTopicName'), variables('EventGridSystemTopicSubName'))]",
              "properties": {
                "destination": {
                  "endpointType": "WebHook",
                  "properties": {
                    "azureActiveDirectoryApplicationIdOrUri": "[parameters('azureADAppIdOrUri')]",
                    "azureActiveDirectoryTenantId": "[parameters('azureTenantId')]",
                    "endpointUrl": "[format('https://{0}/api/file/webhook', reference(resourceId('Microsoft.Web/sites', variables('apiapp_name')), '2020-06-01').defaultHostName)]",
                    "maxEventsPerBatch": 1,
                    "preferredBatchSizeInKilobytes": 64
                  }
                },
                "filter": {
                  "includedEventTypes": [
                    "Microsoft.Storage.BlobCreated",
                    "Microsoft.Storage.BlobDeleted"
                  ],
                  "isSubjectCaseSensitive": false,
                  "enableAdvancedFilteringOnArrays": true,
                  "subjectBeginsWith": "[format('/blobServices/default/containers/{0}/', parameters('storageServiceFoldersContainerName'))]"
                },
                "eventDeliverySchema": "EventGridSchema",
                "retryPolicy": {
                  "maxDeliveryAttempts": 30,
                  "eventTimeToLiveInMinutes": 1440
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('apiapp_name'))]",
                "[resourceId('Microsoft.EventGrid/systemTopics', variables('EventGridSystemTopicName'))]"
              ],
              "metadata": {
                "description": "Event Grid Subscription"
              }
            },
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2024-10-01",
              "name": "[variables('aiServices_name')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "sku": {
                "name": "S0"
              },
              "kind": "CognitiveServices",
              "properties": {
                "disableLocalAuth": false,
                "publicNetworkAccess": "Enabled",
                "networkAcls": {
                  "defaultAction": "Allow"
                }
              },
              "metadata": {
                "description": "AI Cognitive Services"
              }
            }
          ],
          "outputs": {
            "url": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', variables('webapp_name')), '2020-06-01').defaultHostName)]"
            },
            "api_url": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', variables('apiapp_name')), '2020-06-01').defaultHostName)]"
            }
          }
        }
      }
    }
  ],
  "outputs": {
    "APP_URL": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'all-resources'), '2022-09-01').outputs.url.value]"
    },
    "AZURE_LOCATION": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "AZURE_TENANT_ID": {
      "type": "string",
      "value": "[tenant().tenantId]"
    }
  }
}