{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AI-One Documentation","text":"<ul> <li>Deployment Guide<ul> <li>Overview</li> <li>Application Registration</li> <li>Deployment Steps Using GitHub Actions</li> <li>Deployment Steps Using Azure DevOps</li> </ul> </li> </ul>"},{"location":"agile-ai-one-faqs/","title":"Agile Chat FAQS","text":""},{"location":"agile-ai-one-faqs/#what-is-agile-ai-one","title":"What is Agile AI-One?","text":"<p>AI-One is an enterprise AI platform designed to help organizations rapidly adopt AI safely, at scale, and with deep enterprise integration. It empowers enterprise, public sector, and commercial customers to create, validate, and deploy AI-driven use cases in minutes\u2014not hours or days.</p> <p>AI-One seamlessly connects with enterprise data and integration sources, solving the common challenges of AI adoption by providing:</p> <p>Enterprise-grade AI orchestration \u2013 unify and manage AI Assistants, Agents, and Chatbots across your organization. Seamless scalability &amp; security \u2013 deploy AI solutions with role-based access control and enterprise authentication. Frictionless AI use case validation \u2013 experiment with new AI applications quickly, reducing time-to-value. Centralized AI management \u2013 streamline deployment, monitoring, and governance of AI solutions. AI-powered search &amp; data insights \u2013 create AI Search Indexes, integrate unstructured data sources, and enhance decision-making with intelligent retrieval. By consolidating AI capabilities into a single, scalable platform, AI-One reduces complexity, accelerates innovation, and ensures AI solutions are robust, secure, and aligned with enterprise needs.</p>"},{"location":"agile-ai-one-faqs/#who-is-agilechat-built-for","title":"Who is AgileChat Built for ?","text":"<p>AI-One is built for enterprise, public sector, and commercial organizations looking to accelerate AI adoption while maintaining security, scalability, and governance.</p> <p>It is designed for government agencies, universities, financial institutions, and businesses of all sizes, including SMBs, that want to:</p> <p>\u2022   Rapidly validate AI use cases \u2013 shorten time-to-value and move from experimentation to production seamlessly. \u2022   Scale AI across the organization \u2013 provide a centralized platform for consistent AI management and governance. \u2022   Unify AI initiatives \u2013 eliminate AI silos by integrating multiple AI Assistants, Agents, and Chatbots under a single framework. \u2022   Ensure compliance and security \u2013 leverage enterprise-grade security, authentication, and access controls.</p> <p>Whether an organization is just starting its AI journey or scaling enterprise-wide AI adoption, AI-One provides the foundation for managing, optimizing, and orchestrating AI solutions with confidence.</p>"},{"location":"agile-ai-one-faqs/#what-problem-does-ai-one-solve","title":"What Problem Does AI-One Solve?","text":"<p>AI-One addresses the key challenges organizations face when adopting AI at scale, ensuring seamless integration, security, and manageability.</p> <p>\u2022   Fragmented AI Solutions \u2013 Many organizations develop multiple AI applications using different accelerators and tools, leading to inconsistent authentication, security, and governance. AI-One provides a unified platform where AI Assistants, Agents, and Chatbots share common security, administration, and feature sets. \u2022   Scaling AI Efficiently \u2013 Without a centralized approach, organizations often reinvent the wheel for every new AI initiative, leading to high operational overhead. AI-One streamlines AI adoption, enabling rapid proof-of-concept validation and enterprise-wide scalability without unnecessary duplication. \u2022   Orchestrating AI Agents \u2013 In the era of AI-driven automation, businesses need a cohesive AI ecosystem where multiple AI Assistants, Agents, and Chatbots work together seamlessly. AI-One provides enterprise-grade AI orchestration, enabling teams to integrate and coordinate AI-driven workflows effectively.</p> <p>By consolidating AI development, deployment, and management into a single, scalable framework, AI-One eliminates complexity, accelerates AI innovation, and ensures organizations maximize the value of their AI investments.</p>"},{"location":"agile-ai-one-faqs/#how-ai-one-solves-these-problems","title":"How AI-One Solves These Problems","text":"<p>AI-One provides a unified, scalable, and secure platform that simplifies AI adoption and management across an organization. It eliminates fragmented AI solutions, enables efficient scaling, and orchestrates AI agents seamlessly.</p> <ol> <li>Unified AI Platform for Scalable AI Adoption     Provides a centralized framework to develop, deploy, and manage AI Assistants, Agents, and Chatbots.     Ensures all AI applications share a common authentication, security, and governance model, reducing maintenance complexity.</li> <li>Seamless Enterprise Integration &amp; AI Workflows     Integrates with enterprise data sources such as databases, APIs, CMSs, and data platforms like Azure Fabric.     Enables custom AI workflows and agent coordination, supporting the creation of AI search indexes, assistants, and chatbots with configurable parameters (e.g., system prompts, temperature, etc.).</li> <li>Rapid AI Use Case Validation &amp; Deployment     AI Agents can be created and validated instantly through the AI-One UI, removing the need for complex deployments and custom development.     Data interaction can be assessed quickly through automated ingestion or direct uploads, allowing teams to test, iterate, and release AI-driven solutions in minutes\u2014not weeks.</li> <li>Role-Based Access Control &amp; Security     Granular permission management ensures teams and departments only access their assigned AI Assistants and data.     Built-in enterprise-grade security supports private deployments, leveraging Azure authentication and compliance controls.</li> <li>Private AI with Secure ChatGPT-Like Capabilities     Deploy a private AI chat solution that offers a familiar ChatGPT experience while ensuring enterprise security, governance, and control.     Enables organizations to chat over internal data sources while maintaining data sovereignty within their Azure environment.</li> <li>Enterprise AI Orchestration &amp; Scalability     Seamlessly integrates and scales multiple AI Agents across the organization while maintaining a consistent security and administration layer.     Supports AI-powered search and document intelligence, allowing users to upload, index, and query enterprise data within AI-One.</li> </ol> <p>By consolidating AI initiatives under one powerful, scalable platform, AI-One accelerates AI adoption, enhances security, reduces complexity, and enables enterprises to innovate with AI at scale.</p>"},{"location":"agile-ai-one-faqs/#ai-innovation-in-action","title":"AI Innovation in Action","text":"<p>Imagine a world where: - Customer and employee queries are answered instantly by intelligent AI Agents trained on your enterprise data. - Teams access critical knowledge effortlessly, retrieving the right information in seconds without searching through endless documents. - AI Agents streamline complex workflows, automating repetitive tasks and enabling employees to focus on high-value work.</p> <p>With AI-One, this isn\u2019t the future\u2014it\u2019s your competitive advantage today.</p>"},{"location":"agile-ai-one-faqs/#what-featuers-does-agilechat-provide","title":"What featuers does AgileChat provide","text":"<p>It has the following features.</p> <pre><code>- AgileChat supports creating AI Agents and chatbots with custom system prompts that connect to enterprise data sources e.g. databases, APIs, data platforms like Azure Fabric\n- AgileChat allows users in the user interface to create new AI Search Indexes, Upload documents to those index and create AI Agents and Chatbots over those AI Search Indexes by customising the system prompt and the various LLM parameters like temperature, top p etc.\n- AgileChat supports end users creating their own AI Chat Bots with custom system prompts, temperature top p etc.\n- AgileChat enables role based access control so different groups within the organisation can  only access their allocated AI Assistants and AI Search Indexes\n</code></pre>"},{"location":"agile-ai-one-faqs/#key-feature-private-chat","title":"Key Feature - Private Chat","text":"<p>Agile Chat allows organisations to deploy a private ChatGPT-like chat instance in their Azure Subscription with a familiar user experience and the added capabilities of chatting over your data and files. The key benefits of AgileChat over a public or shared OpenAI/ChatGPT solution include are: \u2022   Private: The solution is deployed into the DPC Azure tenancy, allowing complete isolation and security controlled to a specific Azure Entra tenant. \u2022   Controlled: Network traffic can be fully isolated to the DPC environment and routed through appropriate firewalls and other access control mechanisms.  \u2022   Configurability : Customisation has been added with DPC data sources, the ability to securely upload specific files and the future functionality to connect to other internal data sources or systems.</p>"},{"location":"agile-ai-one-faqs/#what-data-sources-does-agilechat-support","title":"What data sources does AgileChat support","text":"<p>AI is only as capable as the data it has access to. </p> <p>AgileChat integrates across a broad number of datasources for different customers. </p> <ol> <li>Automated enterprise data ingestion</li> </ol> <p>A common pattern for data ingestion for enteprises is to provide a blob storage container to the organisation. The data team at the organisation can then export content from their existing systems (e.g. policy documents, content from CMS systems) into the speicifed storage file, from where it is automatically ingested and indexed into Azure AI Search, making it availble to AI assistants</p> <ol> <li>Manual upload via the AgileChat UI</li> </ol> <p>AgileChat includes capabilities to create new \"Containers\". A Container in the AgileChat ui is an abtraction over Azure AI Search Indexes. </p> <ol> <li>SharePoint integration</li> </ol> <p>Connecting directly to Sharepoint to access information is a feature that is currently in development. </p>"},{"location":"agile-ai-one-faqs/#comparisons-to-other-solutions","title":"Comparisons to other solutions","text":""},{"location":"agile-ai-one-faqs/#how-is-agile-chat-different-to-point-solutions-like-ai-accelerators-or-low-codeno-code-ai-tools-like-copilot-studio","title":"How is Agile Chat different to Point Solutions like AI Accelerators or Low Code/No Code AI tools like CoPilot Studio ?","text":"<ol> <li>Customizability and Flexibility</li> <li>Low-code/no-code tools like Copilot Studio are designed for rapid prototyping and general use cases, but they often fall short for complex, enterprise-specific requirements.</li> <li> <p>AgileChat offers deep enterprise-specific customization to ensure the solution aligns precisely with the organization's unique processes, data architecture, and compliance needs.</p> </li> <li> <p>Scalability and Integration</p> </li> <li>Challenges with Copilot Studio: While it provides ease of integration, scaling multiple agents with common authentication, administration, and security layers across departments becomes challenging.</li> <li>AgileChat scales seamlessly by consistently integrating AI Assistants with enterprise-grade authentication and role-based access control.</li> <li> <p>AgileChat handles orchestration of multiple AI agents as part of a broader AI ecosystem, something generic tools don\u2019t inherently provide.</p> </li> <li> <p>Operational Efficiency Challenges with AI point solutions: Organizations often face fragmented solutions, leading to duplicated efforts in authentication, security, and administration. AgileChat eliminates this duplication:</p> </li> <li>Unified orchestration across AI Assistants.</li> <li>Streamlined maintenance and reduced complexity.</li> <li> <p>Shared features across all AI applications.</p> </li> <li> <p>Enterprise Data Handling</p> </li> <li>Data complexity: Copilot Studio may connect to structured and unstructured data but does not provide consistent indexing, role-based access, and data source management that enterprises require.</li> <li> <p>AgileChat provides: AI Search Index creation for fine-grained data control, centralized management of enterprise data sources and secure partitioning of data and AI models between departments.</p> </li> <li> <p>Ownership and Control Vendor lock-in: Off-the-shelf solutions tie organizations to a specific vendor\u2019s roadmap and constraints. AgileChat:</p> </li> <li>Offers full control over features, roadmap, and data sovereignty.</li> <li> <p>Enables rapid adaptation to changing enterprise needs, beyond the capabilities of generic tools.</p> </li> <li> <p>Long-term ROI Copilot has a per user pricing that for public sector organisation, enterprises and large organisation can make CoPilot inaccessible.  Lack of flexibility and high maintenance costs for enterprise-scale deployment can make it more costly over time. AgileChat:</p> </li> <li>A tailored solution with predictable maintenance and upgrade paths.</li> <li>Greater long-term value as it evolves alongside enterprise needs.</li> </ol>"},{"location":"agile-ai-one-faqs/#technical-faqs","title":"Technical FAQs","text":"<ol> <li>What technologies does AgileChat leverage ? </li> </ol> <p>Azure Chat is built on Azure OpenAI, Azure AI Search and other Azure services.</p> <p>The front end application is a React web application that is hosted on an Azure Web App.  The primary API is a .NET Core minimal API hosted on an Azure Web App.  Both web apps can share an App Service Plan.</p> <p>CosmosDB is the primary database utilised.</p> <p>Work is currently in progress to support a range of other models as well as OpenAI.</p> <ol> <li>What Authorisation methods are available: </li> </ol> <p>The system utilises three roles for users: Admins, Content Managers, and Users</p> <p>Examples of role providers:  i. Default Authorization Provider - all users are admins ii. Simple Authorization Provider  - users are added to one of the three roles via their email address in a simple UI in AgileChat - this configuration is stored in CosmosDB iii. Entra Authorization Provider  iv. MS Graph Authorization Provider  v. External API Authorization Provider - (built for uts) they supply generic endpoints that provide a particular interface that lets us query roles</p> <ol> <li>What components are used in the application ? </li> </ol> <p>The role of each of the components in the diagram above is described here: Azure Open AI : Large Language Model used to understand and generate text queries and responses. App Service Plan: Hosts the web site application code and communicates with the back-end services. Azure Cosmos DB: Used to store the chat history and settings of every chat associated to users. Document Intelligence: Used to process and embed/vectorize documents uploaded in a chat thread. Key vault: Stores secrets securely for the web application, event grid and/or APIM instances to access. Speech Service: Used by the web application for text to speech/speech to text integration in the chat sessions (optional) Search service: Azure AI Search instance to store vectorized chunked indexes when files are uploaded in chat threads and uploaded files in blob storage folders. Used for RAG querying in chat threads and returning associated citations. Storage account: Used to store images generated by AI and files uploaded by the user into folders for automatic pipeline ingestion. Event Grid System Topic: Used to subscribe and listen to changed blob storage folder events to automatically trigger a webhook call to the web application to begin indexing the files in Azure AI Search. APIM: Gateway to provide optional connection to Azure OpenAI API\u2019s and authenticate using AD JWT tokens instead of keys. EntraID: Used to allow users to authenticate and log into the web application using their Microsoft credentials based on their AD domain.</p>"},{"location":"agile-ai-one-faqs/#security-details","title":"Security details","text":""},{"location":"agile-ai-one-faqs/#security-considerations","title":"Security Considerations","text":"<p>Azure AD Integration: The chat solution uses Azure Active Directory (Azure AD) for secure user authentication and single sign-on. This enables role-based access control (RBAC), allowing only authorized users to access the application. Token-Based Access: Access tokens are used to secure API calls between components, following OAuth 2.0 and OpenID Connect protocols. Each session token has a set expiration to limit access duration and requires reauthentication when expired.</p>"},{"location":"agile-ai-one-faqs/#data-protection","title":"Data Protection","text":"<p>Encryption at Rest: CosmosDB and any other data stores use AES-256 encryption for data at rest to safeguard sensitive information. All backups are also encrypted following Azure standards. Encryption in Transit: All data transmitted between services is encrypted using TLS 1.2 or above, protecting data integrity and confidentiality as it flows across Azure services and to the end-user\u2019s device. VNET: private networks are to be installed before going live to production to ensure network access is restricted to only within internal organisation use. Key Management: All keys and secrets required by the solution are stored securely in Azure Key Vault. Access to the vault is strictly controlled through Azure AD roles, and each component only has access to the keys it needs.</p>"},{"location":"agile-ai-one-faqs/#role-based-access-control-rbac","title":"Role-Based Access Control (RBAC)","text":"<p>Roles are defined to restrict access at different levels (e.g., admin, content administration, user) and ensure users have only the minimum necessary permissions. RBAC currently used for NAVI is only user &amp; admin Roles. To increase the privilege of a user to become an administrator, set the ADMIN_EMAIL_ADDRESS environment configuration in the web app to be a comma separated list of email addresses that require admin level permissions. Admins are allowed to view logs of chats and publish global level prompts and personas.</p>"},{"location":"api/","title":"API","text":"<p>At present this is simply a .NET 8 Minimal API to surface the required APIs to the UI. </p>"},{"location":"api/#enterprise-di-framework","title":"Enterprise DI framework","text":"<p>For evaluation, we should implement some flavour of a clean architecture framework. </p> <p>The two top ones are both quite complex: From Dor Lugasi-Gal Blog and Repo</p> <p>From Jason Taylor Blog and Repo</p>"},{"location":"architecture/","title":"Archiecture","text":""},{"location":"architecture/#front-end-application","title":"Front End Application","text":"<p>The front end application is a React app that is built with Vite.</p> <p>It could be deployed as a static web app, but due to many customer requirements for all resources to be deployed in VNETs it is being deployed onto a web app. </p> <p>It also could have been deployed onto the same web app as the API, but a deliberate decision has been made to ensure that APIM can easily be inserted between the front end and the back end. </p>"},{"location":"azd/","title":"Azd","text":"<ol> <li>start by creating a new dev environemtn</li> </ol> <pre><code>azd env new dev\n</code></pre> <ol> <li>check my environment</li> </ol> <pre><code>azd env list\n</code></pre> <ol> <li>list in use varibales</li> </ol> <pre><code>azd env get-values\n</code></pre> <ol> <li>switch environments</li> </ol> <pre><code>azd env select dev\n</code></pre>"},{"location":"branching-strategy/","title":"Comparisons of Branching Strategies","text":"<p>https://www.gitkraken.com/learn/git/best-practices/git-branch-strategy</p>"},{"location":"cors/","title":"Cors","text":""},{"location":"cors/#cors-with-azure-app-service-production","title":"CORS with Azure App Service (Production)","text":"<p>When your .NET API is hosted on Azure App Service, you may also need to adjust the CORS settings from the Azure Portal, though the configuration in Program.cs should be sufficient in most cases.</p> <p>Navigate to your Azure App Service in the Azure Portal. Under Settings, go to CORS. Add your allowed frontend domain(s) (e.g., https://your-production-domain.com). Save the settings.</p>"},{"location":"cors/#verifying-cors-requests","title":"Verifying CORS Requests","text":"<p>To verify that CORS is working, open your browser\u2019s developer tools (F12), go to the Network tab, and inspect the API request. </p> <p>If CORS is properly configured, you should see the following headers in the response:</p> <pre><code>Access-Control-Allow-Origin\nAccess-Control-Allow-Methods\nAccess-Control-Allow-Headers\nAccess-Control-Allow-Credentials (if applicable)\n</code></pre> <p>If there is a CORS issue, the browser will block the request and you'll see errors like CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.</p>"},{"location":"front-end/","title":"Front End","text":""},{"location":"front-end/#style-sheets","title":"Style Sheets","text":"<p>Global Style Sheet is in /src/agile-chat-web/src/global.css</p>"},{"location":"front-end/#tool-choice","title":"Tool Choice","text":""},{"location":"front-end/#lucide-react","title":"lucide-react","text":"<p>Used for icons Full list available here: https://lucide.dev/icons</p>"},{"location":"front-end/#shadcn","title":"shadcn","text":"<p>Accessible UI Components https://ui.shadcn.com/docs</p>"},{"location":"front-end/#common-components","title":"Common components","text":"<ul> <li>Accordian: useful for left menus</li> <li>Alert</li> <li>AlertDiaglogue</li> <li>Button</li> <li>Card: A card with header, content and footer</li> <li>Checkbox</li> <li>Collabsible</li> <li>Combobox</li> <li>DataTable</li> <li>Form</li> <li>Input</li> <li>Label :An accessible label associated with no controls</li> <li>NavigationMenu</li> <li>ScrollArea</li> <li>Select</li> <li>Separator</li> <li>Sheet: Used for left popouts</li> <li>Slider</li> <li>Sonner: A popup toast</li> <li>Switch</li> <li>Table</li> <li>Tabs</li> <li>TextArea</li> <li>Toast</li> <li>Toggle</li> <li>ToggleGroup</li> </ul>"},{"location":"front-end/#adding-ui-components","title":"Adding UI Components","text":"<p>To add new ui components use the shadcn CLI.  e.g. to add the button component</p> <pre><code>npx shadcn@latest add button\n</code></pre>"},{"location":"front-end/#usage","title":"Usage","text":"<pre><code>import { Button } from \"@/components/ui/button\"\n</code></pre> <pre><code>&lt;Button variant=\"outline\"&gt;Button&lt;/Button&gt;\n</code></pre>"},{"location":"front-end/#tailwindcss","title":"TailwindCSS","text":"<p>The colors and other design tokens used in the themes and buttonVariants are defined in the Tailwind CSS configuration file  src/agile-chat-web/tailwind.config.js:</p>"},{"location":"front-end/#postcss","title":"postcss","text":"<ul> <li>Tailwind dependency</li> </ul>"},{"location":"front-end/#autoprefixer","title":"autoprefixer","text":"<ul> <li>Tailwind dependency</li> </ul>"},{"location":"front-end/#vite","title":"Vite","text":"<p>Build tool and dev server for JS apps https://vitejs.dev/guide/why.html</p>"},{"location":"front-end/#react","title":"React","text":"<p>https://react.dev/</p>"},{"location":"front-end/#forms","title":"Forms","text":"<p>shadcn form doco: https://ui.shadcn.com/docs/components/form</p> <p>We are using Zod for form validation: https://zod.dev/</p>"},{"location":"packages/","title":"Packages","text":""},{"location":"packages/#npm-packages","title":"npm packages","text":"<p>axios - simplifies making api requests to api endpoints serve - serves the static content on the azure web app</p>"},{"location":"pull-request-process/","title":"Pull request process","text":""},{"location":"pull-request-process/#process-to-create-a-pull-request","title":"Process to create a pull request","text":""},{"location":"pull-request-process/#1-create-a-branch-for-your-pull-request","title":"1 Create a branch for your pull request","text":"<p>Suggestion: Make a descriptive name for your branch. For changes to UI, consider starting the branch name with 'ui-'</p> <pre><code>git branch ui-sidebar\n</code></pre> <p>change to the branch</p> <pre><code>git checkout ui-sidebar\n</code></pre> <p>push the branch to the remote repository</p> <pre><code>git push -u origin ui-sidebar\n</code></pre>"},{"location":"pull-request-process/#to-process-to-test-a-pull-request-locally","title":"To Process to test a pull request locally","text":"<ol> <li> <p>Identify the Pull Request Number. this is the number displayed next to the PRs title in GitHub</p> </li> <li> <p>Fetch the PR and create a new branch</p> </li> </ol> <pre><code>gh pr checkout PR_NUMBER\n-- OR --\ngit fetch origin pull/PR_NUMBER/head:BRANCH_NAME\n</code></pre> <p>e.g. <code>git fetch origin pull/13/head:PR-13</code> OR <code>gh pr checkout 13</code></p> <ol> <li>Switch to the new branch</li> </ol> <pre><code>git checkout BRANCH_NAME\n</code></pre> <p>e.g. <code>git checkout PR-13</code></p> <ol> <li>Merge changes from Main into the PR Branch</li> </ol> <pre><code>git checkout BRANCH_NAME\ngit merge main\n</code></pre> <ol> <li>Push changes back to the PR</li> </ol> <pre><code>git push origin BRANCH_NAME\n</code></pre>"},{"location":"react/","title":"React tips","text":""},{"location":"react/#arrow-functions-vs-function-declarations","title":"Arrow Functions vs Function Declarations","text":"<p>You can declare pages and components either way. Arrow functions are more modern and often more terse. </p>"},{"location":"react/#arrow-function","title":"Arrow Function","text":"<pre><code>import React, { useState } from 'react';\n\nconst PersonasPage = () =&gt; {\n    const [isHistoryOpen, setIsHistoryOpen] = useState(false);\n\n    return (\n        &lt;div&gt;\n            &lt;div&gt;Personas&lt;/div&gt;\n            &lt;button onClick={() =&gt; setIsHistoryOpen(!isHistoryOpen)}&gt;\n                Toggle History\n            &lt;/button&gt;\n            {isHistoryOpen &amp;&amp; &lt;div&gt;History is open&lt;/div&gt;}\n        &lt;/div&gt;\n    );\n};\n\nexport default PersonasPage;\n</code></pre> <p>if it just returns jsx it can be even shorter</p> <pre><code>const PersonasPage = () =&gt; &lt;div&gt;Personas&lt;/div&gt;;\n</code></pre>"},{"location":"react/#function-declaration-component","title":"Function Declaration Component","text":"<pre><code>import React, { useState } from 'react';\n\nexport default function ChatInterface() {\n    const [isHistoryOpen, setIsHistoryOpen] = useState(false);\n\n    return (\n        &lt;div&gt;\n            &lt;div&gt;Personas&lt;/div&gt;\n            &lt;button onClick={() =&gt; setIsHistoryOpen(!isHistoryOpen)}&gt;\n                Toggle History\n            &lt;/button&gt;\n            {isHistoryOpen &amp;&amp; &lt;div&gt;History is open&lt;/div&gt;}\n        &lt;/div&gt;\n    );\n}\n</code></pre>"},{"location":"run-locally/","title":"Run Locally","text":""},{"location":"run-locally/#steps","title":"Steps","text":""},{"location":"run-locally/#run-the-api","title":"Run the API","text":"<ol> <li>Change directory to the 'src\\agile-chat-api'</li> <li>Run the api 'dotnet run'</li> </ol>"},{"location":"run-locally/#run-the-web-ui","title":"Run the web UI","text":"<ol> <li>Change directory to the 'src\\agile-chat-web'</li> <li>Install npm packages by running 'npm install'</li> <li>Start the app by running 'npm run dev'</li> <li>Access the app on http://localhost:3000</li> </ol>"},{"location":"deployment/app_registration/","title":"Application Registration Guide","text":"<p>Application registration is required to enable the following capabilities:</p> <ul> <li>User and App Authentication: Authenticate both users and applications with Azure Active Directory.</li> <li>API Access: Grant the application permission to access Microsoft Graph and other protected APIs.</li> <li>CI/CD Integration: Allow deployment pipelines to authenticate and deploy resources securely as part of automated workflows.</li> </ul> <p>In the next section, the guide will walk you through the steps to set up the application registration required for the AI-One solution.</p> <ol> <li>Register a new application in Azure.</li> <li>Grant permissions to developers to manage the application registration.</li> <li>Expose an API and define scopes (required for backend applications to allow secure client access).</li> <li>Provide API access to client applications.</li> <li>Set up additional API permissions for role providers (if applicable).</li> </ol>"},{"location":"deployment/app_registration/#1-register-a-new-application","title":"1. Register a New Application","text":"<ol> <li>Sign in to the Azure Portal.</li> <li>In the search bar, enter App registrations and select it.</li> <li>Click + New registration.</li> <li>Complete the registration form:<ul> <li>Name: Enter a descriptive name (e.g., <code>My Company AI Platform - Dev</code>).</li> <li>Supported account types: Select Single tenant.</li> <li>Redirect URI: Leave blank for now. This will be configured after resource deployment.</li> </ul> </li> <li>Click Register.</li> <li>Note the following details from the overview page:<ul> <li>Application (client) ID: Unique identifier for your application.</li> <li>Directory (tenant) ID: Identifier for your Azure AD tenant.</li> </ul> </li> </ol>"},{"location":"deployment/app_registration/#2-assign-owners","title":"2. Assign Owners","text":"<ol> <li>In the app registration, navigate to Manage &gt; Owners.</li> <li>Add required developers (e.g., <code>Adam.Stephensen@agile-insights.com.au</code>) as owners. This will allow them to configure settings and manage credentials after deployment.</li> </ol>"},{"location":"deployment/app_registration/#3-expose-an-api-for-backend-application","title":"3. Expose an API (for Backend Application)","text":"<p>This allows backend applications to define permission scopes and enable secure access for client applications.</p> <ol> <li>In the app registration, go to Expose an API.</li> <li>Set the Application ID URI to <code>api://&lt;Application (client) ID&gt;</code> (e.g., <code>api://9ezz5cae-8z55-4zzz-9zzz-0zzzzz630zzz</code>).<ul> <li>If not set, click Set and enter the value, then click Save.</li> </ul> </li> <li>Under Scopes defined by this API, click Add a scope and enter:<ul> <li>Scope name: <code>User.Read</code></li> <li>Who can consent: Admins and users</li> <li>Admin/User Consent Display Name/Description: <code>User.Read</code></li> <li>State: Enabled</li> <li>Click Add scope.</li> </ul> </li> </ol>"},{"location":"deployment/app_registration/#4-provide-api-access-to-client-applications","title":"4. Provide API access to Client Applications","text":"<p>AI-One will use the same client ID for both the API and web app.</p> <ol> <li>To enable a client application to access this API, go to the Expose an API section of your app registration.<ul> <li>Click Add a client application.</li> <li>Enter the Client Application ID you noted earlier.</li> <li>Click Add application button.</li> </ul> </li> <li>Next, grant the <code>User.Read</code> scope to the client application:<ul> <li>Navigate to the API Permissions tab of the App Registration.</li> <li>Click Add a permission.</li> <li>Select APIs my organization uses.</li> <li>Start typing the name of the App Registration (the one you just created).</li> <li>Select the App Registration from the list.</li> <li>Choose Delegated Permissions.</li> <li>Type <code>User.Read</code> into the \"Select permissions\" search field.</li> <li>Select the <code>User.Read</code> Permission.</li> <li>Click the Add Permission button.</li> </ul> </li> </ol> <p>This will allow the client application to authenticate and access the API using the defined scopes.</p>"},{"location":"deployment/app_registration/#5-additional-api-permissions-for-role-providers","title":"5. Additional API Permissions for Role Providers","text":"<p>AgileOne supports multiple Role Providers which restrict access to functionality and data based on the roles assigned to authenticated users.</p> <ul> <li>Default Role Provider: All authenticated users have access.</li> <li>App Setting Role Provider: Admins specified via app configuration.</li> <li>Custom Role Provider: Roles mapped via SQL Server (CSV import).</li> <li>Standard Role Provider: Roles stored in CosmosDB.</li> <li>Entra Role Provider: Roles queried from Entra via Microsoft Graph API.</li> </ul> <p>Implementing any role provider other than the Default Role Provider requires custom development. If you plan to use the Entra Role Provider, you must grant additional Microsoft Graph API permissions to your application registration:</p> <ul> <li>Microsoft Graph:<ul> <li><code>User.Read</code></li> <li><code>User.Read.All</code></li> </ul> </li> </ul> <p>These permissions enable the application to query user roles and directory information from Microsoft Entra ID. Be sure to grant admin consent for these permissions in the Azure Portal to ensure proper access.</p>"},{"location":"deployment/azure_devops_steps/","title":"AI-One Deployment Using Azure DevOps","text":"<p>Deployment is managed using Azure DevOps Pipelines, defined in the <code>.azure-pipelines</code> directory of the project repository.</p> <p>The deployment process includes the following steps:</p> <ul> <li>Deploy AI-One Platform Infrastructure: Provisions the core Azure resources and shared services required for the solution.</li> <li>Deploy AI-One API: Provisions the backend resources and deploys the Agile.Chat API application to Azure.</li> <li>Deploy AI-One Web App: Provisions the frontend resources and deploys the Agile.Chat web application to Azure.</li> </ul>"},{"location":"deployment/azure_devops_steps/#1-set-up-source-code-repository","title":"1. Set Up Source Code Repository","text":"<p>Clone or import the agile-chat repository into your Azure DevOps project.</p>"},{"location":"deployment/azure_devops_steps/#2-create-azure-devops-service-connections","title":"2. Create Azure DevOps Service Connections","text":"<p>To enable Azure DevOps Pipelines to deploy resources to Azure, create a Service Connection using a Service Principal with appropriate permissions.</p> <p>Repeat these steps for each environment (e.g., <code>dev</code>, <code>tst</code>, <code>uat</code>, <code>prod</code>) as needed.</p> <p>To create a Service Connection:</p> <ol> <li>In Azure DevOps, go to Project Settings &gt; Service connections.</li> <li>Click New service connection &gt; Azure Resource Manager.</li> <li>Select App registration (Manual).</li> <li>For Credential Type, choose Workload Identity Federation.</li> <li>Enter a Service Connection Name and Description (e.g., <code>dev-service-connection</code>).</li> <li>Set Environment to Azure Cloud.</li> <li>Enter your Azure Tenant ID.</li> <li>Click Next.</li> </ol> <p>Configure Federated Credentials in Azure</p> <ol> <li>In the Azure portal, navigate to Azure Active Directory &gt; App registrations and select your app registration.</li> <li>In the left menu, select Certificates &amp; secrets &gt; Federated credentials.</li> <li>Click + Add credential and choose Other issuer as the scenario.</li> <li>Copy the Issuer URL and Subject identifier from the Azure DevOps service connection setup page and paste them into the corresponding fields in Azure.</li> <li>Provide a Name for the federated credential (e.g., <code>AzureDevOps-&lt;env&gt;</code>).</li> <li>Click Add to save the federated credential.</li> </ol> <p>Complete Service Connection Setup</p> <ol> <li>Back in Azure DevOps, set the Scope Level to Subscription.</li> <li>Enter your Azure Subscription ID and Subscription Name.</li> <li>Enter the Service Principal Client ID (from your app registration).</li> <li>(Optional) Select Grant access permission to all pipelines if you want all pipelines to use this connection.</li> <li>Click Save to create the service connection.</li> </ol>"},{"location":"deployment/azure_devops_steps/#3-create-environments-in-azure-devops","title":"3. Create Environments in Azure DevOps","text":"<p>The deployment is designed to work with multiple environments (e.g., dev, tst, uat, prod). Create the required environments in your Azure DevOps project.</p> <p>To create environments in Azure DevOps:</p> <ol> <li>Go to Pipelines &gt; Environments.</li> <li>Click New environment and enter a name (e.g., <code>dev</code>, <code>tst</code>, <code>uat</code>, <code>prod</code>).</li> <li>Repeat for each environment required.</li> </ol> <p>Environments are used to manage environment-specific configurations, secrets, and approvals.</p>"},{"location":"deployment/azure_devops_steps/#4-configure-pipeline-variables","title":"4. Configure Pipeline Variables","text":"<p>Create the following environment variables in each environment created in the previous step.</p> <p>To add environment variables:</p> <ol> <li>Go to Pipelines &gt; Library in Azure DevOps.</li> <li>Click + Variable group.</li> <li>Name the group exactly as your environment (e.g., <code>dev</code>, <code>tst</code>, <code>uat</code>, <code>prod</code>).</li> <li> <p>Add each of the following variables:</p> <ul> <li><code>AZURE_SUBSCRIPTION_ID</code>: The unique identifier of the Azure subscription.</li> <li><code>AZURE_TENANT_ID</code>: The Azure Active Directory (AAD) tenant ID associated with the organization.</li> <li><code>AZURE_CLIENT_ID</code>: The application (client) ID of the Azure Service Principal used for authentication and deployment automation.</li> <li><code>AZURE_RESOURCE_GROUP</code>: The name of the Azure resource group.</li> <li><code>VITE_AGILECHAT_API_URL</code>: The base URL for the Agile.Chat API.</li> </ul> </li> <li> <p>Repeat step 3 and 4 for each environment to support.</p> </li> </ol>"},{"location":"deployment/azure_devops_steps/#5-create-azure-pipelines-for-platform-api-and-web-app","title":"5. Create Azure Pipelines for Platform, API, and Web App","text":"<p>Create three pipelines in Azure DevOps for deploying the platform infrastructure, backend API, and frontend web app. Each pipeline should use the corresponding YAML file from the <code>.azure-pipelines</code> directory.</p> <p>To create each pipeline:</p> <ol> <li>In Azure DevOps, go to Pipelines.</li> <li>Click New pipeline and select your repository.</li> <li>Choose Existing Azure Pipelines YAML file.</li> <li>For the platform infrastructure pipeline, select <code>.azure-pipelines/deploy-platform.yml</code>.</li> <li>For the backend API pipeline, select <code>.azure-pipelines/deploy-backend.yml</code>.</li> <li>For the frontend web app pipeline, select <code>.azure-pipelines/deploy-frontend.yml</code>.</li> <li>Complete the setup for each pipeline and save.</li> </ol>"},{"location":"deployment/azure_devops_steps/#5-platform-deployment","title":"5. Platform Deployment","text":"<pre><code>infra\n\u251c\u2500\u2500 platform\n    \u251c\u2500\u2500 platform.bicep\n    \u251c\u2500\u2500 [env].bicepparam\n</code></pre> <ul> <li><code>platform.bicep</code>: The bicep file that defines the platform infrastructure resources.</li> <li><code>[env].bicepparam</code>: Environment-specific parameter file for the platform deployment.</li> </ul>"},{"location":"deployment/azure_devops_steps/#51-configure-parameters","title":"5.1 Configure Parameters","text":"<p>For every environment required, create a corresponding parameter file (e.g., <code>dev.bicepparam</code>, <code>tst.bicepparam</code>) in the <code>infra/platform</code> directory.</p> <p>The parameter file name must exactly match the environment name. These files provide environment-specific values that the pipeline uses during deployment.</p> Parameter Name Description Default Value <code>environmentName</code> The name of the deployment environment (should match the environment, e.g., <code>dev</code>, <code>tst</code>). (none) <code>projectName</code> The project name. <code>ag-aione</code> <code>location</code> Azure region for resource deployment. <code>australiaeast</code> <code>azureClientId</code> Azure Service Principal Client ID for authentication. (none) <code>azureTenantId</code> Azure Active Directory Tenant ID. (none) <code>openAILocation</code> Azure region for OpenAI resources. <code>australiaeast</code> <code>deployAIFoundryResources</code> Set to <code>true</code> to deploy AI Foundry resources, or <code>false</code> to deploy  resources as standalone services. <code>true</code> <code>deployOpenAiModels</code> Set to <code>true</code> to deploy OpenAI models, or <code>false</code> to skip model deployment. <code>true</code> <code>semanticSearchSku</code> SKU for Azure AI Search. <code>standard</code> <code>networkIsolation</code> Set to <code>true</code> to enable private network isolation, or <code>false</code> for public access. <code>false</code> <p>Example: <code>dev.bicepparam</code></p> <pre><code>using './platform.bicep'\n\nparam environmentName = 'dev'\nparam projectName = 'ag-aione'\nparam location = 'australiaeast'\nparam azureClientId = '&lt;your-client-id&gt;'\nparam azureTenantId = '&lt;your-tenant-id&gt;'\nparam openAILocation = 'australiaeast'\nparam deployAIFoundryResources = true\nparam deployOpenAiModels = true\nparam semanticSearchSku = 'standard'\nparam networkIsolation = false\n</code></pre> <p>Tip: Keep sensitive values secure and never commit secrets to source control. Use Azure DevOps variable groups or pipeline secrets for all sensitive data such as client IDs, tenant IDs, and API keys.</p>"},{"location":"deployment/azure_devops_steps/#52-run-platform-deployment-pipeline","title":"5.2 Run Platform Deployment Pipeline","text":"<p>The platform infrastructure is deployed using the <code>.azure-pipelines/deploy-platform.yml</code> pipeline.</p> <p>To deploy the platform infrastructure:</p> <ol> <li>In Azure DevOps, go to Pipelines.</li> <li>Find and select the Deploy Platform Infrastructure pipeline.</li> <li>Click Run pipeline.</li> <li>Fill in the required inputs:<ul> <li>Project Name: The name of your project (e.g., <code>ag-aione</code>).</li> <li>Environment: The target environment (e.g., <code>dev</code>, <code>tst</code>, <code>uat</code>, or <code>prod</code>).</li> <li>Location: The Azure region for deployment (e.g., <code>australiaeast</code>).</li> </ul> </li> <li>Click Run to start deployment.</li> </ol> <p>The pipeline will use the appropriate parameter file (e.g., <code>dev.bicepparam</code>) based on the selected environment, and deploy the platform infrastructure resources defined in <code>platform.bicep</code>.</p>"},{"location":"deployment/azure_devops_steps/#6-api-deployment","title":"6. API Deployment","text":"<pre><code>infra\n\u251c\u2500\u2500 backend\n    \u251c\u2500\u2500 apiapp.bicep\n    \u251c\u2500\u2500 [env].bicepparam\n</code></pre> <ul> <li><code>apiapp.bicep</code>: The Bicep file that defines the API infrastructure resources.</li> <li><code>[env].bicepparam</code>: Environment-specific parameter file for the API deployment.</li> </ul> <p>The API infrastructure is deployed using the <code>.azure-pipelines/deploy-backend.yml</code> pipeline. This pipeline provisions the backend Azure resources and deploys the Agile.Chat API application.</p>"},{"location":"deployment/azure_devops_steps/#61-configure-api-parameters","title":"6.1 Configure API Parameters","text":"<p>For each environment (such as <code>dev</code>, <code>tst</code>, <code>uat</code>, or <code>prod</code>), create a corresponding parameter file (e.g., <code>dev.bicepparam</code>, <code>tst.bicepparam</code>) in the <code>infra/backend</code> directory.</p> <p>The parameter file name must exactly match the environment name. These files provide environment-specific values for the API deployment.</p> Parameter Name Description Default Value <code>environmentName</code> The name of the deployment environment (should match the environment, e.g., <code>dev</code>, <code>tst</code>). (none) <code>projectName</code> The project name. <code>ag-aione</code> <code>location</code> Azure region for resource deployment. <code>australiaeast</code> <code>azureClientId</code> Azure Service Principal Client ID for authentication. (none) <code>azureTenantId</code> Azure Active Directory Tenant ID. (none) <code>apiAppName</code> Name of the API App Service. (none) <code>appServicePlanName</code> Name of the App Service Plan. (none) <code>applicationInsightsName</code> Name of the Application Insights resource. (none) <code>logAnalyticsWorkspaceName</code> Name of the Log Analytics Workspace. (none) <code>keyVaultName</code> Name of the Key Vault. (none) <code>storageName</code> Name of the Storage Account. (none) <code>storageAccountName</code> Name of the existing Storage Account. (none) <code>documentIntelligenceServiceName</code> Name of the Form Recognizer resource. (none) <code>documentIntelligenceEndpoint</code> Endpoint URL for the Document Intelligence Service. (none) <code>openAiName</code> Name of the Azure OpenAI resource. (none) <code>openAiApiVersion</code> API version for Azure OpenAI. (none) <code>searchServiceName</code> Name of the Azure Search Service. (none) <code>serviceBusName</code> Name of the Service Bus namespace. (none) <code>serviceBusQueueName</code> Name of the Service Bus queue. (none) <code>cosmosDbAccountName</code> Name of the Cosmos DB account. (none) <code>cosmosDbAccountEndpoint</code> Endpoint for the Cosmos DB account. (none) <code>allowedOrigins</code> Allowed origins for CORS. <code>[]</code> <code>adminEmailAddresses</code> Array of admin email addresses. <code>[]</code> <code>aspCoreEnvironment</code> Deployment environment for ASP.NET Core. (none) <code>eventGridName</code> Name of the Event Grid system topic. (none) <p>Example: <code>dev.bicepparam</code></p> <pre><code>using './apiapp.bicep'\n\nparam environmentName = 'dev'\nparam projectName = 'ag-aione'\nparam location = 'australiaeast'\nparam azureClientId = '&lt;your-client-id&gt;'\nparam azureTenantId = '&lt;your-tenant-id&gt;'\nparam aspCoreEnvironment = 'Development'\nparam appServicePlanName = 'ag-aione-dev-app'\nparam applicationInsightsName = 'ag-aione-dev-apiapp'\nparam logAnalyticsWorkspaceName = 'ag-aione-dev-la'\nparam keyVaultName = 'ag-aione-dev-kv'\nparam storageName = 'agaionedevsto'\nparam storageAccountName = 'agaionedevsto'\nparam documentIntelligenceServiceName = 'ag-aione-dev-docintel'\nparam documentIntelligenceEndpoint = 'https://ag-aione-dev-foundry.cognitiveservices.azure.com/'\nparam openAiName = 'ag-aione-dev-aillm'\nparam openAiApiVersion = '2024-08-01-preview'\nparam searchServiceName = 'ag-aione-dev-search'\nparam serviceBusName = 'ag-aione-dev-service-bus'\nparam cosmosDbAccountName = 'ag-aione-dev-cosmos'\nparam cosmosDbAccountEndpoint = 'https://ag-aione-dev-cosmos.documents.azure.com:443/'\nparam eventGridName = 'ag-aione-dev-blob-eg'\nparam allowedOrigins = ['https://ag-aione-dev-webapp.azurewebsites.net']\nparam adminEmailAddresses = ['admin@example.com']\n</code></pre>"},{"location":"deployment/azure_devops_steps/#62-run-api-deployment-pipeline","title":"6.2 Run API Deployment Pipeline","text":"<p>To deploy the API infrastructure and application:</p> <ol> <li>In Azure DevOps, go to Pipelines.</li> <li>Find and select the Deploy Backend API pipeline.</li> <li>Click Run pipeline.</li> <li>Fill in the required inputs:<ul> <li>Environment: The target environment (e.g., <code>dev</code>, <code>tst</code>, <code>uat</code>, or <code>prod</code>).</li> <li>Api App Name: The name of your API App Service (e.g., <code>ag-aione-dev-apiapp</code>).</li> </ul> </li> <li>Click Run to start deployment.</li> </ol> <p>The pipeline will use the appropriate parameter file (e.g., <code>dev.bicepparam</code>) based on the selected environment, and deploy the API infrastructure and application as defined in <code>apiapp.bicep</code>.</p>"},{"location":"deployment/azure_devops_steps/#7-web-app-deployment","title":"7. Web App Deployment","text":"<pre><code>infra\n\u251c\u2500\u2500 frontend\n    \u251c\u2500\u2500 webapp.bicep\n    \u251c\u2500\u2500 [env].bicepparam\n</code></pre> <ul> <li><code>webapp.bicep</code>: The Bicep file that defines the web app infrastructure resources.</li> <li><code>[env].bicepparam</code>: Environment-specific parameter file for the web app deployment.</li> </ul>"},{"location":"deployment/azure_devops_steps/#71-configure-web-app-parameters","title":"7.1 Configure Web App Parameters","text":"<p>For each environment (such as <code>dev</code>, <code>tst</code>, <code>uat</code>, or <code>prod</code>), create a corresponding parameter file (e.g., <code>dev.bicepparam</code>, <code>tst.bicepparam</code>) in the <code>infra/frontend</code> directory. The parameter file name must exactly match the environment name. These files provide environment-specific values for the web app deployment.</p> Parameter Name Description Default Value <code>environmentName</code> The name of the deployment environment (should match the environment, e.g., <code>dev</code>, <code>tst</code>). (none) <code>projectName</code> The project name. <code>ag-aione</code> <code>location</code> Azure region for resource deployment. <code>australiaeast</code> <code>tags</code> Resource tags (loaded from tags.json). <code>{}</code> <code>appServicePlanName</code> Name of the App Service Plan. (none) <code>apiAppName</code> Name of the API App Service. (none) <code>logAnalyticsWorkspaceName</code> Name of the Log Analytics Workspace. (none) <p>Example: <code>dev.bicepparam</code></p> <pre><code>using './webapp.bicep'\n\nparam environmentName = 'dev'\nparam projectName = 'ag-aione'\nparam location = 'australiaeast'\nparam tags = loadJsonContent('../tags.json')\nparam appServicePlanName = 'ag-aione-dev-app'\nparam apiAppName = 'ag-aione-dev-apiapp'\nparam logAnalyticsWorkspaceName = 'ag-aione-dev-la'\n</code></pre>"},{"location":"deployment/azure_devops_steps/#72-run-web-app-deployment-pipeline","title":"7.2 Run Web App Deployment Pipeline","text":"<p>To deploy the web app infrastructure and application:</p> <ol> <li>In Azure DevOps, go to Pipelines.</li> <li>Find and select the Deploy Frontend Web App pipeline.</li> <li>Click Run pipeline.</li> <li>Fill in the required inputs:<ul> <li>Environment: The target environment (e.g., <code>dev</code>, <code>tst</code>, <code>uat</code>, or <code>prod</code>).</li> <li>Web App Name: The name of your Web App Service (e.g., <code>ag-aione-dev-webapp</code>).</li> </ul> </li> <li>Click Run to start deployment.</li> </ol> <p>The pipeline will use the appropriate parameter file (e.g., <code>dev.bicepparam</code>) based on the selected environment, and deploy the web app infrastructure and application as defined in <code>webapp.bicep</code>.</p>"},{"location":"deployment/github_steps/","title":"AI-One Deployment Using GitHub Actions","text":"<p>Deployment is managed using GitHub Actions, defined in the <code>.github/workflows</code> directory of the project repository.</p> <p>The deployment process includes the following steps:</p> <ul> <li>Deploy AI-One Platform Infrastructure: Provisions the core Azure resources and shared services required for the solution.</li> <li>Deploy AI-One API: Provisions the backend resources and deploys the Agile.Chat API application to Azure.</li> <li>Deploy AI-One Web App: Provisions the frontend resources and deploys the Agile.Chat web application to Azure.</li> </ul>"},{"location":"deployment/github_steps/#1-set-up-source-code-repository","title":"1. Set Up Source Code Repository","text":"<p>Fork or copy agile-chat repository to a new project repository in Customer's GitHub organization.</p>"},{"location":"deployment/github_steps/#2-create-environments","title":"2. Create Environments","text":"<p>The deployment is designed to work with multiple environments (e.g., dev, tst, uat, and prod). Create the required environments in the new project repository on GitHub.</p> <p>The environments will be used to manage environment-specific configurations and secrets.</p> <p>To create environments in GitHub:</p> <ol> <li>Navigate to the new project repository on GitHub.</li> <li>Click on the Settings tab.</li> <li>In the left sidebar, select Environments under the Code and automation section.</li> <li>Click the New environment button and enter a name (e.g., <code>dev</code>, <code>tst</code>, <code>uat</code>, <code>prod</code>).</li> <li>Repeat step 4 for each environment required.</li> </ol>"},{"location":"deployment/github_steps/#3-create-environment-variables","title":"3. Create Environment Variables","text":"<p>Create the following environment variables in each environment created in the previous step.</p> <p>To add environment variables to an environment:</p> <ol> <li>In your repository, go to Settings &gt; Environments and select the environment to configure.</li> <li>Under the Environment secrets and variables section, click Add variable.</li> <li> <p>Add each of the following variables (repeat for each environment as needed):</p> <ul> <li><code>AZURE_SUBSCRIPTION_ID</code>: The unique identifier of the Azure subscription.</li> <li><code>AZURE_TENANT_ID</code>: The Azure Active Directory (AAD) tenant ID associated with the organization.</li> <li><code>AZURE_CLIENT_ID</code>: The application (client) ID of the Azure Service Principal used for authentication and deployment automation.</li> <li><code>AZURE_RESOURCE_GROUP</code>: The name of the Azure resource group.</li> <li><code>PROJECT_NAME</code>: The name of the project (e.g., <code>ag-aione</code>).</li> <li><code>AZURE_LOCATION</code>: The location (region) where resources will be deployed (e.g., <code>australiaeast</code>).</li> <li> <p><code>VITE_AGILECHAT_API_URL</code>: The base URL for the Agile.Chat API. </p> <p>e.g., <code>https://ag-aione-apiapp.azurewebsites.net</code>.</p> </li> </ul> </li> <li> <p>Repeat step 3 for each environment to support.</p> </li> </ol>"},{"location":"deployment/github_steps/#4-configure-access-to-github-actions","title":"4. Configure Access to GitHub Actions","text":"<p>To enable GitHub Actions to deploy resources to Azure, you must set up Federated Credentials between Azure Active Directory (Entra ID) and the GitHub repository. This allows GitHub Actions workflows to authenticate securely to Azure without storing secrets.</p> <p>To set up Federated Credentials:</p> <ol> <li>In the Azure Portal, go to Azure Active Directory &gt; App registrations and select the application registration created earlier (e.g., <code>My Company AI Platform - Dev</code>).</li> <li>In the left menu, select Certificates &amp; secrets &gt; Federated credentials.</li> <li>Click + Add credential.</li> <li>Fill in the form:<ul> <li>Name: e.g., <code>GitHubActions-&lt;env&gt;</code></li> <li>Issuer: <code>https://token.actions.githubusercontent.com</code></li> <li>Organization: Your GitHub organization name (e.g., <code>myorg</code>)</li> <li>Repository: The repository name (e.g., <code>myrepo</code>)</li> <li>Entity type: The entity type, which should be <code>Environment</code></li> <li>Environment: The environment name (e.g., <code>dev</code>, <code>tst</code>, <code>uat</code>, <code>prod</code>)</li> <li>Subject identifier: <code>repo:&lt;org&gt;/&lt;repo&gt;:environment:&lt;env&gt;</code> (e.g., <code>repo:myorg/myrepo:environment:dev</code>)</li> </ul> </li> <li>Click Add to save the federated credential.</li> <li>Repeat steps 3-5 for each environment you created in the previous step (e.g., <code>dev</code>, <code>tst</code>, <code>uat</code>, <code>prod</code>).</li> </ol>"},{"location":"deployment/github_steps/#5-platform-deployment","title":"5. Platform Deployment","text":"<pre><code>infra\n\u251c\u2500\u2500 platform\n    \u251c\u2500\u2500 platform.bicep\n    \u251c\u2500\u2500 [env].bicepparam\n</code></pre> <ul> <li><code>platform.bicep</code>: The bicep file that defines the platform infrastructure resources.</li> <li><code>[env].bicepparam</code>: Environment-specific parameter file for the platform deployment.</li> </ul>"},{"location":"deployment/github_steps/#51-configure-parameters","title":"5.1 Configure Parameters","text":"<p>For every environment required, define in GitHub (such as <code>dev</code>, <code>tst</code>, <code>uat</code>, or <code>prod</code>), create a corresponding parameter file (e.g., <code>dev.bicepparam</code>, <code>tst.bicepparam</code>) in the <code>infra/platform</code> directory.</p> <p>The parameter file name must exactly match the environment name. These files provide environment-specific values that the GitHub Action uses during deployment.</p> Parameter Name Description Default Value <code>environmentName</code> The name of the deployment environment (should match the environment, e.g., <code>dev</code>, <code>tst</code>). (none) <code>projectName</code> The project name. <code>ag-aione</code> <code>location</code> Azure region for resource deployment. <code>australiaeast</code> <code>azureClientId</code> Azure Service Principal Client ID for authentication. (none) <code>azureTenantId</code> Azure Active Directory Tenant ID. (none) <code>openAILocation</code> Azure region for OpenAI resources. <code>australiaeast</code> <code>deployAIFoundryResources</code> Set to <code>true</code> to deploy AI Foundry resources, or <code>false</code> to deploy resources as standalone services. <code>true</code> <code>deployOpenAiModels</code> Set to <code>true</code> to deploy OpenAI models, or <code>false</code> to skip model deployment. <code>true</code> <code>semanticSearchSku</code> SKU for Azure AI Search. <code>standard</code> <code>networkIsolation</code> Set to <code>true</code> to enable private network isolation, or <code>false</code> for public access. <code>false</code> <p>Example: <code>dev.bicepparam</code></p> <pre><code>using './platform.bicep'\n\nparam environmentName = 'dev'\nparam projectName = 'ag-aione'\nparam location = 'australiaeast'\nparam azureClientId = '&lt;your-client-id&gt;'\nparam azureTenantId = '&lt;your-tenant-id&gt;'\nparam openAILocation = 'australiaeast'\nparam deployAIFoundryResources = true\nparam deployOpenAiModels = true\nparam semanticSearchSku = 'standard'\nparam networkIsolation = false\n</code></pre> <p>Tip: Keep sensitive values secure and never commit secrets to source control. Use GitHub environment secrets for all sensitive data such as client IDs, tenant IDs, and API keys.</p>"},{"location":"deployment/github_steps/#52-run-platform-deployment-github-action","title":"5.2 Run Platform Deployment GitHub Action","text":"<p>The platform infrastructure is deployed using the <code>.github/workflows/deploy-platform.yml</code> GitHub Action.</p> <p>To deploy the platform infrastructure:</p> <ol> <li>Navigate to the Actions tab in your GitHub repository.</li> <li>Find and select the Deploy AI-One Platform Infrastructure workflow.</li> <li>Click Run workflow.</li> <li>Fill in the required inputs:<ul> <li>Project Name: The name of your project (e.g., <code>ag-aione</code>).</li> <li>Environment: The target environment (e.g., <code>dev</code>, <code>tst</code>, <code>uat</code>, or <code>prod</code>).</li> <li>Location: The Azure region for deployment (e.g., <code>australiaeast</code>).</li> </ul> </li> <li>Click Run workflow to start deployment.</li> </ol> <p>The workflow will use the appropriate parameter file (e.g., <code>dev.bicepparam</code>) based on the selected environment, and deploy the platform infrastructure resources defined in <code>platform.bicep</code>.</p>"},{"location":"deployment/github_steps/#6-api-deployment","title":"6 API Deployment","text":"<pre><code>infra\n\u251c\u2500\u2500 backend\n    \u251c\u2500\u2500 apiapp.bicep\n    \u251c\u2500\u2500 [env].bicepparam\n</code></pre> <ul> <li><code>apiapp.bicep</code>: The Bicep file that defines the API infrastructure resources.</li> <li><code>[env].bicepparam</code>: Environment-specific parameter file for the API deployment.</li> </ul> <p>The API infrastructure is deployed using the <code>.github/workflows/deploy-backend.yml</code> GitHub Action. This action provisions the backend Azure resources and deploys the Agile.Chat API application.</p>"},{"location":"deployment/github_steps/#61-configure-api-parameters","title":"6.1 Configure API Parameters","text":"<p>For each environment (such as <code>dev</code>, <code>tst</code>, <code>uat</code>, or <code>prod</code>), create a corresponding parameter file (e.g., <code>dev.bicepparam</code>, <code>tst.bicepparam</code>) in the <code>infra/backend</code> directory.</p> <p>The parameter file name must exactly match the environment name. These files provide environment-specific values for the API deployment.</p> Parameter Name Description Default Value <code>environmentName</code> The name of the deployment environment (should match the environment, e.g., <code>dev</code>, <code>tst</code>). (none) <code>projectName</code> The project name. <code>ag-aione</code> <code>location</code> Azure region for resource deployment. <code>australiaeast</code> <code>azureClientId</code> Azure Service Principal Client ID for authentication. (none) <code>azureTenantId</code> Azure Active Directory Tenant ID. (none) <code>apiAppName</code> Name of the API App Service. (none) <code>appServicePlanName</code> Name of the App Service Plan. (none) <code>applicationInsightsName</code> Name of the Application Insights resource. (none) <code>logAnalyticsWorkspaceName</code> Name of the Log Analytics Workspace. (none) <code>keyVaultName</code> Name of the Key Vault. (none) <code>storageName</code> Name of the Storage Account. (none) <code>storageAccountName</code> Name of the existing Storage Account. (none) <code>documentIntelligenceServiceName</code> Name of the Form Recognizer resource. (none) <code>documentIntelligenceEndpoint</code> Endpoint URL for the Document Intelligence Service. (none) <code>openAiName</code> Name of the Azure OpenAI resource. (none) <code>openAiApiVersion</code> API version for Azure OpenAI. (none) <code>searchServiceName</code> Name of the Azure Search Service. (none) <code>serviceBusName</code> Name of the Service Bus namespace. (none) <code>serviceBusQueueName</code> Name of the Service Bus queue. (none) <code>cosmosDbAccountName</code> Name of the Cosmos DB account. (none) <code>cosmosDbAccountEndpoint</code> Endpoint for the Cosmos DB account. (none) <code>allowedOrigins</code> Allowed origins for CORS. <code>[]</code> <code>adminEmailAddresses</code> Array of admin email addresses. <code>[]</code> <code>aspCoreEnvironment</code> Deployment environment for ASP.NET Core. (none) <code>eventGridName</code> Name of the Event Grid system topic. (none) <p>Example: <code>dev.bicepparam</code></p> <pre><code>using './apiapp.bicep'\n\nparam environmentName = 'dev'\nparam projectName = readEnvironmentVariable('PROJECT_NAME', 'ag-aione')\nparam location = readEnvironmentVariable('AZURE_LOCATION', 'australiaeast')\nparam tags = loadJsonContent('../tags.json')\nparam azureTenantId = readEnvironmentVariable('AZURE_TENANT_ID')\n\nparam aspCoreEnvironment = 'Development'\nparam appServicePlanName = 'ag-aione-dev-app'\nparam applicationInsightsName = 'ag-aione-dev-apiapp'\nparam logAnalyticsWorkspaceName = 'ag-aione-dev-la'\nparam keyVaultName = 'ag-aione-dev-kv'\nparam storageName = 'agaionedevsto'\nparam storageAccountName = 'agaionedevsto'\nparam documentIntelligenceServiceName = 'ag-aione-dev-docintel'\nparam documentIntelligenceEndpoint = 'https://ag-aione-dev-foundry.cognitiveservices.azure.com/'\nparam openAiName = 'ag-aione-dev-aillm'\nparam openAiApiVersion = '2024-08-01-preview'\nparam searchServiceName = 'ag-aione-dev-search'\nparam serviceBusName = 'ag-aione-dev-service-bus'\nparam cosmosDbAccountName = 'ag-aione-dev-cosmos'\nparam cosmosDbAccountEndpoint = 'https://ag-aione-dev-cosmos.documents.azure.com:443/'\nparam eventGridName = 'ag-aione-dev-blob-eg'\n\nparam allowedOrigins = ['https://ag-aione-dev-webapp.azurewebsites.net']\n\nparam adminEmailAddresses = ['adam-stephensen@agile-analytics.com.au']\n</code></pre>"},{"location":"deployment/github_steps/#62-run-api-deployment-github-action","title":"6.2 Run API Deployment GitHub Action","text":"<p>To deploy the API infrastructure and application:</p> <ol> <li>Navigate to the Actions tab in your GitHub repository.</li> <li>Find and select the Deploy AI-One Api workflow.</li> <li>Click Run workflow.</li> <li>Fill in the required inputs:<ul> <li>Environment Name: The target environment (e.g., <code>dev</code>, <code>tst</code>, <code>uat</code>, or <code>prod</code>).</li> <li>Api App Name: The name of your API App Service (e.g., <code>ag-aione-dev-apiapp</code>).</li> </ul> </li> <li>Click Run workflow to start deployment.</li> </ol> <p>The workflow will use the appropriate parameter file (e.g., <code>dev.bicepparam</code>) based on the selected environment, and deploy the API infrastructure and application as defined in <code>apiapp.bicep</code>.</p>"},{"location":"deployment/github_steps/#7-web-app-deployment","title":"7. Web App Deployment","text":"<pre><code>infra\n\u251c\u2500\u2500 frontend\n    \u251c\u2500\u2500 webapp.bicep\n    \u251c\u2500\u2500 [env].bicepparam\n</code></pre> <ul> <li><code>webapp.bicep</code>: The Bicep file that defines the web app infrastructure resources.</li> <li><code>[env].bicepparam</code>: Environment-specific parameter file for the web app deployment.</li> </ul>"},{"location":"deployment/github_steps/#71-configure-web-app-parameters","title":"7.1 Configure Web App Parameters","text":"<p>For each environment (such as <code>dev</code>, <code>tst</code>, <code>uat</code>, or <code>prod</code>), create a corresponding parameter file (e.g., <code>dev.bicepparam</code>, <code>tst.bicepparam</code>) in the <code>infra/frontend</code> directory. The parameter file name must exactly match the environment name. These files provide environment-specific values for the web app deployment.</p> Parameter Name Description Default Value <code>environmentName</code> The name of the deployment environment (should match the environment, e.g., <code>dev</code>, <code>tst</code>). (none) <code>projectName</code> The project name. <code>ag-aione</code> <code>location</code> Azure region for resource deployment. <code>australiaeast</code> <code>tags</code> Resource tags (loaded from tags.json). <code>{}</code> <code>appServicePlanName</code> Name of the App Service Plan. (none) <code>apiAppName</code> Name of the API App Service. (none) <code>logAnalyticsWorkspaceName</code> Name of the Log Analytics Workspace. (none) <p>Example: <code>dev.bicepparam</code></p> <pre><code>using './webapp.bicep'\n\nparam environmentName = 'dev'\nparam projectName = readEnvironmentVariable('PROJECT_NAME', 'ag-aione')\nparam location = readEnvironmentVariable('AZURE_LOCATION', 'australiaeast')\nparam tags = loadJsonContent('../tags.json')\nparam appServicePlanName = 'ag-aione-dev-app'\nparam apiAppName = 'ag-aione-dev-apiapp'\nparam logAnalyticsWorkspaceName = 'ag-aione-dev-la'\n</code></pre>"},{"location":"deployment/github_steps/#72-run-web-app-deployment-github-action","title":"7.2 Run Web App Deployment GitHub Action","text":"<p>To deploy the web app infrastructure and application:</p> <ol> <li>Navigate to the Actions tab in your GitHub repository.</li> <li>Find and select the Deploy AI-One Web App workflow.</li> <li>Click Run workflow.</li> <li>Fill in the required inputs:<ul> <li>Environment Name: The target environment (e.g., <code>dev</code>, <code>tst</code>, <code>uat</code>, or <code>prod</code>).</li> <li>Web App Name: The name of your Web App Service (e.g., <code>ag-aione-dev-webapp</code>).</li> </ul> </li> <li>Click Run workflow to start deployment.</li> </ol> <p>The workflow will use the appropriate parameter file (e.g., <code>dev.bicepparam</code>) based on the selected environment, and deploy the web app infrastructure and application as defined in <code>webapp.bicep</code>.</p>"},{"location":"deployment/overview/","title":"AI-One Deployment Guide","text":"<p>This guide provides step-by-step instructions for deploying the AI-One application on Azure.</p> <p>The deployment process provisions and configures the following solution components:</p> <ul> <li>Platform: Core infrastructure and shared services</li> <li>API: Backend services</li> <li>Web App: Frontend application for user interaction</li> </ul>"},{"location":"deployment/overview/#1-infrastructure-as-code-iac","title":"1. Infrastructure as Code (IaC)","text":"<p>The infrastructure resources are defined using modular Bicep templates. All the templates and supporting scripts are under the <code>infra</code> directory of the project repository:</p> <pre><code>infra\n\u251c\u2500\u2500 platform\n\u251c\u2500\u2500 backend\n\u251c\u2500\u2500 frontend\n\u251c\u2500\u2500 scripts\n\u2514\u2500\u2500 modules\n</code></pre> <ul> <li><code>platform</code>: Platform Bicep code &amp; parameter files</li> <li><code>backend</code>: API app Bicep code &amp; parameter files</li> <li><code>frontend</code>: Web app Bicep code &amp; parameter files</li> <li><code>scripts</code>: Deployment and utility scripts</li> <li><code>modules</code>: Reusable Bicep modules (e.g., Key Vault, Cosmos DB etc.)</li> </ul>"},{"location":"deployment/overview/#11-platform-infrastructure","title":"1.1 Platform Infrastructure","text":"<p>The platform infrastructure is defined in the <code>infra/platform</code> folder. This folder contains the Bicep files that provision the core resources required for the AI-One platform.</p> Resource Resource Type Purpose Log Analytics Workspace Microsoft.OperationalInsights/workspaces Centralized logging and monitoring Key Vault Microsoft.KeyVault/vaults Secure storage for secrets and keys Storage Account Microsoft.Storage/storageAccounts General-purpose storage for the platform Azure AI Search Microsoft.Search/searchServices Provides search capabilities App Service Plan Microsoft.Web/serverfarms Hosts web applications and APIs Cosmos DB Account Microsoft.DocumentDB/databaseAccounts Globally distributed NoSQL database for application data Document Intelligence Microsoft.CognitiveServices/accounts AI-powered document analysis Service Bus Microsoft.ServiceBus/namespaces Messaging and eventing between services Azure OpenAI Service Microsoft.CognitiveServices/accounts Access to Azure OpenAI models"},{"location":"deployment/overview/#12-api-infrastructure","title":"1.2 API Infrastructure","text":"<p>The API infrastructure is defined in the <code>infra/backend</code> folder and provisions the resources required to host Agile.Chat API. The following resources are created by the <code>apiapp.bicep</code> file:</p> Resource Resource Type Purpose API App Microsoft.Web/sites Hosts the Agile.Chat API application Service Bus Queue Microsoft.ServiceBus/namespaces/queues Queue for managing indexing requests Cosmos DB Database Microsoft.DocumentDB/databaseAccounts/sqlDatabases Stores chat history and configuration Event Grid System Topic Microsoft.EventGrid/systemTopics Eventing for blob storage events Event Grid Subscription Microsoft.EventGrid/systemTopics/eventSubscriptions Routes blob events to Service Bus Application Insights Microsoft.Insights/components Application monitoring and telemetry Blob Containers Microsoft.Storage/storageAccounts/blobServices/containers Storage containers for API data"},{"location":"deployment/overview/#13-web-app-infrastructure","title":"1.3 Web App Infrastructure","text":"<p>The web app infrastructure is defined in the <code>infra/frontend</code> folder and provisions the resources required to host the Agile.Chat frontend application. The following resources are created by the <code>webapp.bicep</code> file:</p> Resource Resource Type Purpose Web App Microsoft.Web/sites Hosts the Agile.Chat frontend application"},{"location":"deployment/overview/#2-deployment-steps","title":"2. Deployment Steps","text":"<ol> <li> <p>Create App Registration in Azure Active Directory (Entra ID). The registered application will be used for the below mentioned requirements.</p> <ul> <li>Authorize CI/CD pipelines to deploy resources.</li> <li>Secure access to AI-One API using OAuth 2.0 authentication.</li> </ul> <p>Follow the Application Registration Guide to complete this step.</p> <p>You would need a new app registration for each environment (e.g., <code>dev</code>, <code>tst</code>, <code>uat</code>, <code>prod</code>) to isolate resources and permissions.</p> </li> <li> <p>AI-One deployment supports both Azure DevOps and GitHub Actions.</p> <p>Based on the choice of CI/CD platform, follow the respective deployment steps:</p> <ul> <li>Deployment Steps Using GitHub</li> <li>Deployment Steps Using Azure DevOps</li> </ul> </li> <li> <p>Update the redirect URI in the app registration after deployment. The redirect URI is the URL where Azure AD will send authentication responses. It should match the URL of your deployed web app. </p> <p>e.g., <code>https://ag-aione-dev-webapp.azurewebsites.net</code>.</p> </li> </ol>"}]}